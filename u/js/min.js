function test(e,t){try{e(),t=0}catch(n){t=1}return!t}function test_webp(e,t,n){return t=$q.defer(),n=new Image,n.onload=n.onerror=function(){t.resolve(n.width>0)},n.src="data:image/webp;base64,"+e,t.promise}function el(e){return doc.createElement(e)}function arrayFrom(e,t,n){return slice.call(e,t,n)}function arrayRemove(e,t){e.splice(e.indexOf(t),1)}function capitalise(e){return uppercase(e.charAt(0))+e.slice(1)}function query(e,t){return element((t||body).querySelectorAll(e))}function type(e,t){return e===win?"global":"object"!=(t=typeof e)?t:lowercase(toString.call(e).slice(8,-1))}function vendor(e,t){return arguments.length>2?(e[t]||e[prefix+capitalise(t)]).apply(e,arrayFrom(arguments).slice(2)):e[t]||e[prefix+capitalise(t)]}function to_blob(e,t){return new Blob([e],{type:t||""})}function text_to_base64(e){return btoa(e)}function text_to_dataURL(e,t){return text_to_dataURL(btoa(e),t)}function base64_to_text(e){return atob(e)}function base64_to_objectURL(e,t){return dataURL_to_objectURL(e,t)}function base64_to_dataURL(e,t){return"data:"+(t||"application/octet-stream")+";base64,"+e}function dataURL_to_buff(e){return text_to_buff(dataURL_to_base64(e))}function dataURL_to_base64(e){return e.split(",")[1]}function dataURL_to_mime(e){return e.split(";")[0].split(":")[1]}function dataURL_to_blob(e,t){return to_blob(dataURL_to_buff(e),t||dataURL_to_mime(e))}function dataURL_to_objectURL(e,t){return blob_to_objectURL(dataURL_to_blob(e,t))}function blob_to_objectURL(e){return vendor("URL").createObjectURL(e)}function blob_to_image(e,t){return t=new Image,_invoke(t,e),t}function blob_to_video(e,t){return t=new Video,_invoke(t,e),t}function blob_to_audio(e,t){return t=new Audio,_invoke(t,e),t}function blob_to_buff(e,t){_read(e,"ArrayBuffer",t)}function blob_to_text(e,t){_read(e,"Text",t)}function blob_to_base64(e,t){_read(e,"DataURL",function(e){t(dataURL_to_base64(e))})}function blob_to_dataURL(e,t){_read(e,"DataURL",t)}function _invoke(e){e.src=blob_to_objectURL(e),e.onload=e.onerror=function(){vendor("URL").revokeObjectURL(e.src)}}function _read(e,t,n,i){i=new FileReader,i.onload=function(){n(i.result)},i["readAs"+t](e)}function valueFn(e){return function(){return e}}function property(e){return function(t){return t[e]}}function silverlightInstalled(e){var t,n,i,r,a,o,s=0,l=0;try{try{if(t=navigator.plugins["Silverlight Plug-In"]){if(e){for(n=t.description,"1.0.30226.2"==n&&(n="2.0.30226.2"),r=n.split("."),a=e.split("."),i=0,o=Math.max(r.length,a.length);o>i;i++){if(r[i]&&!a[i]&&+r[i]>0||+r[i]>+a[i])return!0;if(a[i]&&!r[i]&&+a[i]>0||+r[i]<+a[i])return!1}return!0}s=1}else l=1}catch(u){l=1}if(l){var c=new ActiveXObject("AgControl.AgControl");(!e||c.IsVersionSupported(e))&&(s=1),c=null}}catch(u){}return!!s}function utf8_encode(e){var t,n,i,r,a,o,s;for(t=e.match(/[\x00-\x7f]+|[^\x00-\x7f]+/g),i=t.length,n=t[0].charCodeAt(0)<128?1:0;i>n;n+=2){for(r=t[n],o=r.length,s="",a=0;o>a;a++)chr=r.charCodeAt(a),s+=2048>chr?String.fromCharCode(chr>>6|192,63&chr|128):String.fromCharCode(chr>>12|224,chr>>6&63|128,63&chr|128);t[n]=s}return t.join("")}function parseHeaders(e){var t,n,i,r={};return e?(forEach(e.split("\n"),function(e){i=e.indexOf(":"),t=lowercase(e.trim().substr(0,i)),n=e.trim().substr(i+1),t&&(r[t]?r[t]+=", "+n:r[t]=n)}),r):r}var arr=[],slice=arr.slice,win=window,doc=document,docEl=doc.documentElement,body=doc.body,toString={}.toString,ng=angular,bind=ng.bind,element=ng.element,extend=ng.extend,equals=ng.equals,forEach=ng.forEach,identity=ng.identity,injector=ng.injector,isArray=ng.isArray,isObject=ng.isObject,lowercase=ng.lowercase,module=ng.module,noop=ng.noop,uppercase=ng.uppercase,app=module("wis",["ngTouch","ngRoute"]),ngInjectorGet=injector(["ng"]).get,$q=ngInjectorGet("$q"),$sniffer=ngInjectorGet("$sniffer"),prefix=lowercase(ngInjectorGet("$sniffer").vendorPrefix),canvas=el("canvas"),input=el("input"),supportCanvas=canvas.getContext&&!!canvas.getContext("2d"),user={isSeeder:!1},services=forEach([{limitedTo:"",tpl:"my-device",id:"myDevice",canSave:["*/*",".*"],canPick:["*/*",".*"]},{limitedTo:"",tpl:"link-url",id:"link",canSave:!1,canPick:["*/*",".*"]}],function(e){e.urlName="/"+e.tpl}),nav=navigator,isMobile=/mobile|android|slick\/|kindle|blackberry|opera mini|opera mobi/i.test(lowercase(nav.userAgent)),webp64,supports,tests,config;canvas.height=canvas.width=1,supports={cssAnimation:"animation"in input.style||"webkitAnimation"in input.style,onlyPostMsgString:test(function(){postMessage({toString:function(){throw 0}},"*")}),corsBlob:test(function(){top.postMessage(new Blob,"*")}),xhr2blob:test(function(e){if(e=new XMLHttpRequest,e.responseType="blob","blob"!=e.responseType)throw 0}),fileReader:!!win.FileReader,file:test(function(){new File([],"")}),blob:test(function(){new Blob([])}),filelist:!!win.FileList,directory:!isMobile&&"webkitdirectory"in input,fullscreen:!!vendor(doc,"fullscreenEnabled"),getUserMedia:!!vendor(nav,"getUserMedia"),aDownload:"download"in el("a"),dragNdrop:"draggable"in canvas&&!isMobile,dragNdropFolder:!!win.chrome,captureInput:"capture"in input,canvas:supportCanvas,todataurlwebp:supportCanvas&&0===(webp64=canvas.toDataURL("image/webp",0)).indexOf("data:image/webp"),todataurljpeg:supportCanvas&&0===canvas.toDataURL("image/jpeg",0).indexOf("data:image/jpeg"),todataurlpng:supportCanvas&&0===canvas.toDataURL("image/png",0).indexOf("data:image/png"),silverlight:silverlightInstalled(),defineProperty:test(function(){Object.defineProperty({},"x",{})}),flash:function(e){try{e=nav.plugins["Shockwave Flash"].description}catch(t){try{e=new ActiveXObject("ShockwaveFlash.ShockwaveFlash").GetVariable("$version")}catch(n){e="0.0"}}return~~e.match(/\d+/)[0]>10}()},"function"!=typeof Object.create&&(Object.create=function(e){function t(){}return t.prototype=e,new t}),window.Silverlight={isInstalled:silverlightInstalled};var MainCtrl=["$filter","$http","$locale","$location","$route","postMessage","$rootScope",function(e,t,n,i,r,a,o){var s=this;s.loading=function(){return!!t.pendingRequests.length},s.supports=supports,s.openService=function(e){s.slideOpen=!1,i.path(e.urlName);var t=query("#main")[0];t.style.position="relative",t.offsetHeight,t.style.position=""},s.closeWindow=function(e){e?o.FileList.emit(200,0,o.FileList.files,"aFilePicker::close","Sending FileList information",""):(o.FileList.emit(204,0,void 0,"aFilePicker::close","client closed the dialog without selecting any files",""),top.location==location&&open(location,"_self").close())}}],ProgressCtrl=["$q",function(e){this.loading=function(){return e.pendingPromises}}],autofocus=valueFn(function(e,t){t[0].focus()}),wisDismissDirective=valueFn({restrict:"A",link:function(e,t,n){var i="dismiss-"+n.wisDismiss;return jStorage.get(i)?void t.parent().remove():void t.on("click",function(){jStorage.set(i,1),t.parent().remove()})}}),wisFullscreenDirective=valueFn({restrict:"A",link:function(e,t){function n(){vendor(doc,"fullscreenElement")?r.call(doc):i.call(docEl)}var i=vendor(docEl,"requestFullScreen"),r=vendor(doc,"exitFullscreen")||vendor(doc,"cancelFullScreen");t.on("click",n)}}),wisHrefDirective=["$location",function(e){return{priority:999,link:function(t,n,i){var r=i.ngHref.replace("#","")==e.$$path?"addClass":"removeClass";n[r]("active"),setTimeout(function(){n[0].style.display="none",n[0].offsetHeight,n[0].style.display=""}),t.$on("$routeChangeSuccess",function(){var t=n[0].hash.replace("#","")==e.$$path?"addClass":"removeClass";n[t]("active")})}}}],wisInfiniteScrollDirective=valueFn({link:function(e,t,n){function i(){o=1}function r(){var t=a.getBoundingClientRect();o&&t.top>=0&&t.left>=0&&t.bottom<=2*(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)&&!(o=0)&&e.$apply(function(){s(i)})}var a=t[0],o=1,s=e.$eval(n.infiniteScroll);query("section[ng-view]").on("scroll",r),e.$on("$destroy",function(){query("section[ng-view]").off("scroll",r)})}}),wisLoadedScripts={},wisLoadDirective=valueFn({restrict:"A",compile:function(e,t){if(!wisLoadedScripts[t.wisLoad]){var n=el("script");n.text=e[0].innerHTML,e.replaceWith(n),wisLoadedScripts[t.wisLoad]=1}}}),filesizeFilter=valueFn(function(e){for(var t=0,n="Byte0KB0MB0GB0TB0PB0EB0ZB0YB".split(0);e>=1024;t++)e/=1024;return e?(e+.5|0)+" "+n[t]:"--"}),$qPendingPromises=["$delegate",function(e){function t(){e.pendingPromises--}var n=e.defer;return e.pendingPromises=0,e.defer=function(){e.pendingPromises++;var i=n();return i.promise.finally(t),i},e}],FileListService=["$location","$q","convert","saveAs","Source","zip","Reader",function(e,t,n,i,r,a,o){function s(e){var t=this;this.emit=e,this.files=[],this.responseType="arrayBuffer",this.mimeType="*/*",this.zipIt=!1,this.extension=void 0,this.services=["myDevice","link"],this.maxFiles=1,this.maxFileSize=1/0,this.minFileSize=0,this.totalMaxFilesSize=1/0,this.totalMinFilesSize=0,this.directory=!1,this.saveMode=!1,this.id=0,this.leftToChoose=this.maxFiles||1/0,this.handler=function(e){if("aFilePicker::FileReader"===e.eventName){var n=this.files[e.detail.id],i=n.private.blob?"BlobReader":"HttpReader",a="readAs"+e.detail.readAs,s="bytes="+e.detail.range;o[i](n)[a](s).then(function(n){t.emit(200,0,n,e.detail.onload)})}forEach(l,function(n){if(typeof e.detail[n]==typeof t[n]&&(t[n]=e.detail[n]),"maxFiles"===n&&n in e.detail&&(t.leftToChoose=t.maxFiles||1/0),"files"===n&&n in e.detail)for(var i,a=e.detail.files,s=0,l=a.length;l>s;s++){i=a[s];var u=i.name||i.relativePath.split("/").pop(),c=new r(i.type,void 0,i.lastModifiedDate||i.lastModified&&new Date(i.lastModified),u,i.size,i.type||"",i.relativePath||"/"+u,t.id++),d=(i.$base64||i.$dataURL)&&o.Base64Reader(i.$base64||i.$dataURL,i.type)||i.$text&&new Blob([i.$text],{type:c.type||""});d&&(c.private.blob=d,c.type=c.type||d.type,c.size=d.size),a[s]=c}}),this.services=services.filter(function(e){return~t.services.indexOf(e.id)&&e[t.saveMode?"canSave":"canPick"]})}}var l="responseType,mimeType,zipIt,extension,services,maxFiles,maxFileSize,minFileSize,totalMaxFilesSize,totalMinFilesSize,directory,files,saveMode".split(",");return s.prototype.remove=function(){},s.prototype.clear=function(){"/selected"==e.path()&&e.path("/"),this.files=[],this.maxFiles&&(this.leftToChoose=this.maxFiles)},s.prototype.removeEventListener=function(){},s.prototype.add=function(e,t,n,i,a,o,s,l){if(this.leftToChoose&&(!o||!(o>this.maxFileSize||o<this.minFileSize))){var u=new r(t,n,i,a,o,s,l,this.id++);return u.private.service=e,u.private[t]=n,this.files.push(u),this.maxFiles&&(this.leftToChoose=this.maxFiles-this.files.length),u}},s.prototype.saveAs=function(){},s.prototype.saveAll=function(){1==this.files.length||this.zipList()},s.prototype.zipList=function(){var e=this.files,n=t.when();a.createWriter(new a.BlobWriter("application/zip"),function(r){e.forEach(function(e){{var i=new a.SourceReader(e),o=e.relativePath;({directory:"inode/directory"===e.type,lastModDate:e.lastModifiedDate})}n=n.then(function(){return t(function(e){r.add(o,i,e)})})}),n.then(function(){r.close(function(e){i(e,"arcive.zip")})})},function(e){throw e})},s.prototype.upload=function(){},s.prototype.upload=function(){},s}],$HttpBackendService=["$browser","$window","$document",function(){function e(e,n,i){return t(e,e.defer,n.angular.callbacks,i[0])}function t(e,t,i){function r(e,t,n){function r(e){var r=-1,a="unknown";this.remove(),e&&("load"!==e.type||i[t].called||(e={type:"error"}),a=e.type,r="error"===e.type?404:200),n&&n(r,a)}var a=el("script");return a.type="text/javascript",a.src=e,a.async=!0,a.onload=r,a.onerror=r,document.body.appendChild(a),r}var a=-1;return function(o,s,l,u,c,d,f,_){function p(){v=a,w&&w(),g&&g.abort()}function h(n,i,r,a,o){x&&t.cancel(x),w=g=null,0===i&&(i=r?200:"file"==urlResolve(s).protocol?404:0),i=1223===i?204:i,o=o||"",n(i,r,a,o),e.$$completeOutstandingRequest(angular.noop)}var v;if(e.$$incOutstandingRequestCount(),s=s||e.url(),"jsonp"==lowercase(o)){var b="_"+(i.counter++).toString(36);i[b]=function(e){i[b].data=e,i[b].called=!0};var w=r(s.replace("JSON_CALLBACK","angular.callbacks."+b),b,function(e,t){h(u,e,i[b].data,"",t),i[b]=noop})}else{var g=new window.XMLHttpRequest;if(d.created&&d.created(g),g.open(o,s,void 0===d.async?!0:d.async),forEach(c,function(e,t){angular.isDefined(e)&&g.setRequestHeader(t,e)}),g.onreadystatechange=function(){if(g&&4==g.readyState){var e=null,t=null,i="";v!==a&&(e=g.getAllResponseHeaders(),t="response"in g?g.response:g.responseText),v===a&&10>n||(i=g.statusText),h(u,v||g.status,t,e,i)}},f&&(g.withCredentials=!0),_)try{g.responseType=_}catch(m){if("json"!==_)throw m}g.send(l||null)}var y=(d||{}).timeout;if(y>0)var x=t(p,y);else y&&y.then&&y.then(p)}}var n=function(){for(var e=3,t=document.createElement("b"),n=t.all||[];t.innerHTML="<!--[if gt IE "+ ++e+"]><i><![endif]-->",n[0];);return e>4?e:document.documentMode}();return e}()],$HttpBackendServiceInterceptor=function(){return{request:function(e){return e.timeout={timeout:e.timeout,created:e.created,async:e.async},e}}},ThirdPartyService=["$http","$route","$cacheFactory",function(e,t,n){var i=t.current.params;if("selected"==i.service)return{status:200,data:{files:[{name:"my-device",type:"inode/directory"}],pathCollection:[]}};var r="https://afilepicker.github.io/"+i.service,a={params:{cmd:"readDir",path:"/"+(i.path||"")},cache:n};return xdomain.slaves(r),e.get(r,a)}],convertService=["parseUri","$http","$rootScope",function(e,t,n){return function(i,r,a,o,s){var l=o;if(a=lowercase(a),o=lowercase(o),"meta"!=o)switch(a){case"directory":return"blob"==o&&supports.blob&&(r=new Blob),void("file"==o&&(r=supports.file?new File([],"."):supports.file?new Blob:""));case"file":if("file"==o)return void(i["$"+l]=r);case"blob":if("blob"==o||"file"==o)return void(i["$"+l]=new Blob([r]));var u=new FileReader,c="readAs"+{arraybuffer:"ArrayBuffer",text:"Text",binarystring:"BinaryString",dataurl:"DataURL",base64:"DataURL"}[o];u.onload=function(){i["$"+l]="base64"==o?u.result.split(",")[1]:u.result},u[c](r);case"meta":return;case"base64":return void("dataurl"==o&&(i["$"+l]="data:"+a+";base64,"+r));case"dataURL":return;case"arraybuffer":return;case"text":return;case"binary":return;case"binary-utf8":return;case"json":return;case"document":return;case"url":var d=e(r),f="*"==s["access-control-allow-origin"],_=f?r:"/u/proxy",p=f?void 0:{url:r},c={arraybuffer:"arraybuffer",blob:"blob",base64:"base64",dataurl:"base64"}[o];return i.name=d.file||d.path.replace(/\/$/,"").split("/").pop()||d.host,i.private.fullPath=r,i.private.timeout=$q.defer(),void t({url:_,responseType:c,timeout:i.private.timeout.promise,params:p,created:function(e){e.addEventListener("readystatechange",function(){if(2==e.readyState){var t=extend({},s,parseHeaders(e.getAllResponseHeaders()));i.type=/[^\;]*/.exec(t["content-type"])[0].trim();var r=t["content-disposition"];r&&(i.name=r.match(/filename="([^"\\]*(?:\\.[^"\\]*)*)"/i)[1]),i.lastModifiedDate=new Date(t["last-modified"]||t.date||i.lastModifiedDate||Date.now()),i.lastModified=i.lastModifiedDate.getTime(),i.relativePath="/"+i.name,n.$apply()}},!1),e.onprogress=function(e){i.loaded=e.loaded}}}).then(function(e){i["$"+l]=("dataurl"==o?"data:"+i.type+";base64,":"")+e.data,i.size=i.size||e.data.size||e.data.byteLength||!e.headers("content-encoding")&&~~e.headers("content-length")||utf8_encode(e.data).length,i.$loaded=i.size})}}}],dragNdropFallbackService=["$http",function(e){return supports.silverlight&&!supports.fileReader?e.jsonp("u/js/silverlight.debug.js").finally:void 0}],parseUriService=function(){var e=/^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,t=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];return function(n){for(var i=e.exec(n),r={},a=14;a--;)r[t[a]]=i[a]||"";return r.queryKey={},r[t[12]].replace(/(?:^|&)([^&=]*)=?([^&]*)/g,function(e,t,n){t&&(r.queryKey[t]=n)}),r.origin=r.protocol+"://"+r.host+(r.port?":"+r.port:""),r}},postMessageService=["$rootScope","$cacheFactory","$browser","FileList",function(e,t,n,i){e.FileList=new i(angular.noop);var r,a={100:"Continue",101:"Switching Protocols",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",306:"(Unused)",307:"Temporary Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Request Entity Too Large",414:"Request-URI Too Long",415:"Unsupported Media Type",416:"Requested Range Not Satisfiable",417:"Expectation Failed",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version"},o=!!win.MessageChannel,s=/(jimmywarting.github.io|draw9patch.com|cssspritegenerator.net|feed.nu)$/;element(win).on("message",function(t){function n(e,t,n,i,s,l){console.log(arguments),t=t||[];var d=0,f=0,_=t.length>32?32:t.length-1;for(f;_>f;d|=arguments[f]<<f++);t=d?~~(""+e+d):e;var l={code:t,detail:n,developerMessage:s,eventName:i,message:l,status:e,statusText:a[e]};!window.MessageChannel&&(l.channel=u),o?r.postMessage(l):r.postMessage(l,c)}if(console.log(t),"aFilePicker::init"===t.data.eventName){r=t.ports&&t.ports[0]||t.source;var l,u=t.data.channel,c=t.origin;if('"null"'==JSON.stringify(c)&&(c="*"),l=e.FileList=new i(n),!s.test(c)&&!/(\*|localhost|127.0.0.1|null|file:\/\/)$/.test(c.replace(/\:\d*$/,"")))return n(403,0,0,"aFilePicker::init","This domain isn't allowed to use this service","Failed to open the picker");if(o){if(!t.ports||!t.ports.length)return n(406,0,0,"aFilePicker::init","This browser supports 'MessageChannel', use it!","Failed to open the picker");t.ports[0].onmessage=function(t){/^aFilePicker\:\:/.test(t.data.eventName)&&e.$apply(l.handler(t.data))}}else element(win).on("message",function(t){t.origin==c&&t.data.channel==u&&/^aFilePicker\:\:/.test(t.data.eventName)&&e.$apply(l.handler(t.data))});e.$apply(l.handler(t.data))}})}],ReaderService=["$http","$q",function(e,t){function n(e,t){var n=!0,i=t.indexOf("=");if(!~i)return-2;var r=t.slice(i+1).split(",").map(function(t){var t=t.split("-"),i=parseInt(t[0],10),r=parseInt(t[1],10);return isNaN(i)?(i=e-r,r=e-1):isNaN(r)&&(r=e-1),r>e-1&&(r=e-1),(isNaN(i)||isNaN(r)||i>r||0>i)&&(n=!1),{start:i,end:r+1}});return r.type=t.slice(0,i),n?r:-1}function i(e,t){for(var i=n(e.size,t),r=[],a=i.length,o=0;a>o;o++)r.push(e.slice(i[o].start,i[o].end));return new Blob(r,{type:e.type||""})}function r(e,n,r){return t(function(t,a){var o=new FileReader;o.onload=function(e){t(e.target.result)},o.onerror=a,o["readAs"+e](i(n,r))})}function a(n){var a=e.get("/u/proxy",{responseType:"blob",params:{url:n.private.url}});return{readAsArrayBuffer:function(e){return a.then(function(t){return r("ArrayBuffer",t.data,e)})},readAsDataURL:function(e){return a.then(function(t){return r("DataURL",t.data,e)})},readAsText:function(e){return a.then(function(t){return r("Text",t.data,e)})},readAsBase64:function(e){return a.then(function(){return I.readAsDataURL(e).then(function(e){return e.split(",")[1]})})},readAsBlob:function(e){return a.then(function(n){return t.when(i(n.data,e))})},readAsFile:function(e){return a.then(function(r){return t.when(new File([i(r.data,e)],n.name,{type:n.type,lastModified:n.lastModified}))})},readAsDataView:function(e){return a.then(function(){return I.readAsArrayBuffer(e).then(function(e){return new DataView(e)})})},readAsStringView:function(e){return a.then(function(){return I.readAsArrayBuffer(e).then(function(e){return new StringView(e)})})},readAsInt8Array:function(e){return a.then(function(){return I.readAsArrayBuffer(e).then(function(e){return new Int8Array(e)})})},readAsUint8Array:function(e){return a.then(function(){return I.readAsArrayBuffer(e).then(function(e){return new Uint8Array(e)})})},readAsUint8ClampedArray:function(e){return a.then(function(){return I.readAsArrayBuffer(e).then(function(e){return new Uint8ClampedArray(e)})})},readAsInt16Array:function(e){return a.then(function(){return I.readAsArrayBuffer(e).then(function(e){return new Int16Array(e)})})},readAsUint16Array:function(e){return a.then(function(){return I.readAsArrayBuffer(e).then(function(e){return new Uint16Array(e)})})},readAsInt32Array:function(e){return a.then(function(){return I.readAsArrayBuffer(e).then(function(e){return new Int32Array(e)})})},readAsUint32Array:function(e){return a.then(function(){return I.readAsArrayBuffer(e).then(function(e){return new Uint32Array(e)})})},readAsFloat32Array:function(e){return a.then(function(){return I.readAsArrayBuffer(e).then(function(e){return new Float32Array(e)})})},readAsFloat64Array:function(e){return a.then(function(){return I.readAsArrayBuffer(e).then(function(e){return new Float64Array(e)})})}}}function o(){function t(t){return e.get(url,{header:{range:t},responseType:"ArrayBuffer"}).then(function(e){return e.data})}function n(t){return e.get(url,{header:{range:t},responseType:"Blob"}).then(function(e){return e.data})}function i(e){return t(e).then(ArrToUint)}return{readAsArrayBuffer:t,readAsUint8Array:i,readAsBlob:n}}function s(e){var n,a=e.private.blob;return n={readAsArrayBuffer:function(e){return r("ArrayBuffer",a,e)},readAsDataURL:function(e){return r("DataURL",a,e)},readAsText:function(e){return r("Text",a,e)},readAsBase64:function(e){return n.readAsDataURL(e).then(function(e){return e.split(",")[1]})},readAsBlob:function(e){return t.when(i(a,e))},readAsFile:function(n){return t.when(new File([i(a,n)],e.name,{type:e.type,lastModified:e.lastModified}))},readAsDataView:function(e){return n.readAsArrayBuffer(e).then(function(e){return new DataView(e)})},readAsStringView:function(e){return n.readAsArrayBuffer(e).then(function(e){return new StringView(e)})},readAsInt8Array:function(e){return n.readAsArrayBuffer(e).then(function(e){return new Int8Array(e)})},readAsUint8Array:function(e){return n.readAsArrayBuffer(e).then(function(e){return new Uint8Array(e)})},readAsUint8ClampedArray:function(e){return n.readAsArrayBuffer(e).then(function(e){return new Uint8ClampedArray(e)})},readAsInt16Array:function(e){return n.readAsArrayBuffer(e).then(function(e){return new Int16Array(e)})},readAsUint16Array:function(e){return n.readAsArrayBuffer(e).then(function(e){return new Uint16Array(e)})},readAsInt32Array:function(e){return n.readAsArrayBuffer(e).then(function(e){return new Int32Array(e)})},readAsUint32Array:function(e){return n.readAsArrayBuffer(e).then(function(e){return new Uint32Array(e)})},readAsFloat32Array:function(e){return n.readAsArrayBuffer(e).then(function(e){return new Float32Array(e)})},readAsFloat64Array:function(e){return n.readAsArrayBuffer(e).then(function(e){return new Float64Array(e)})}}}function l(e,t){var n=e.lastIndexOf(",",300)+1,i=512,r=atob(e.substring(n)),a=r.length;for(t=t||n?e.substring(5,n-8):"",e=[],n=0;a>n;n+=i){for(var o=r.slice(n,n+i),s=o.length,l=new Array(s),u=0;s>u;u++)l[u]=o.charCodeAt(u);e.push(new Uint8Array(l))}return new Blob(e,{type:t||""})}return{HttpReader:a,HttpRangeReader:o,BlobReader:s,Base64Reader:l}}],saveAsService=function(){return win.saveAs||navigator.msSaveOrOpenBlob&&navigator.msSaveOrOpenBlob.bind(navigator)||function(){var e=function(){for(var e=3,t=document.createElement("b"),n=t.all||[];t.innerHTML="<!--[if gt IE "+ ++e+"]><i><![endif]-->",n[0];);return e>4?e:document.documentMode}();if(!(e&&10>e)){var t=function(){return win.URL||win.webkitURL||win},n=el("a"),i=function(e){var t=doc.createEvent("MouseEvents");t.initMouseEvent("click",!0,!1,win,0,0,0,0,0,!1,!1,!1,!1,0,null),e.dispatchEvent(t)},r=win.webkitRequestFileSystem,a=win.requestFileSystem||r||win.mozRequestFileSystem,o=function(e){(win.setImmediate||win.setTimeout)(function(){throw e},0)},s="application/octet-stream",l=0,u=function(e){var n=function(){"string"==typeof e?t().revokeObjectURL(e):e.remove()};win.chrome?n():setTimeout(n,10)},c=function(e,t,n){t=[].concat(t);for(var i=t.length;i--;){var r=e["on"+t[i]];if("function"==typeof r)try{r.call(e,n||e)}catch(a){o(a)}}},d=function(e,o){var d,f,_,p=this,h=e.type,v=!1,b=function(){c(p,"writestart progress write writeend".split(" "))},w=function(){var t=new FileReader;t.onload=function(e){var t=angular.element("<form action=u/downloadify method=post><input name=filename><input name=base64>");t[0].elements.filename.value=o,t[0].elements.base64.value=e.target.result.split(",")[1],t[0].submit()},t.readAsDataURL(e)},g=function(e){return function(){return p.readyState!==p.DONE?e.apply(this,arguments):void 0}},m={create:!0,exclusive:!1};return p.readyState=p.INIT,o||(o="download"),supports.aDownload?(d=t().createObjectURL(e),n.href=d,n.download=o,i(n),p.readyState=p.DONE,b(),void u(d)):(win.chrome&&h&&h!==s&&(_=e.slice||e.webkitSlice,e=_.call(e,0,e.size,s),v=!0),r&&"download"!==o&&(o+=".download"),(h===s||r)&&(f=win),a?(l+=e.size,void a(win.TEMPORARY,l,g(function(t){t.root.getDirectory("saved",m,g(function(t){var n=function(){t.getFile(o,m,g(function(t){t.createWriter(g(function(n){n.onwriteend=function(e){f.location.href=t.toURL(),p.readyState=p.DONE,c(p,"writeend",e),u(t)},n.onerror=function(){var e=n.error;e.code!==e.ABORT_ERR&&w()},"writestart progress write abort".split(" ").forEach(function(e){n["on"+e]=p["on"+e]}),n.write(e),p.abort=function(){n.abort(),p.readyState=p.DONE},p.readyState=p.WRITING}),w)}),w)};t.getFile(o,{create:!1},g(function(e){e.remove(),n()}),g(function(e){e.code===e.NOT_FOUND_ERR?n():w()}))}),w)}),w)):void w())},f=d.prototype,_=function(e,t){return new d(e,t)};return f.abort=function(){var e=this;e.readyState=e.DONE,c(e,"abort")},f.readyState=f.INIT=0,f.WRITING=1,f.DONE=2,f.error=f.onwritestart=f.onprogress=f.onwrite=f.onabort=f.onerror=f.onwriteend=null,_}}()},senderService=function(){function e(e){for(var t=[],n=e.size,i=0;n>i;){var r=Math.min(n,i+util.chunkedMTU),a=e.slice(i,r);t.push(a),i=r}return t}function t(){var e=location.search.split("=").pop(),t=new Peer("sender "+Date.now(),{host:"buddleja.asuscomm.com",port:9e3}),n=0;i=t.connect("Owner"+e,{label:"file"}),i.on("open",function(){}),i.on("data",function(e){e==a.request_nextChunk&&(!r[n].blobs.length&&n++,util.blobToArrayBuffer(r[n].blobs.shift(),function(e){i.send(e)}))}),i.on("close",function(){})}function n(t,n,o){var s=e(n),l={},u={};l[a.name]=o.name,l[a.type]=o.type,l[a.size]=o.size,l[a.lastModifiedDate]=o.lastModifiedDate,l[a.chunks]=s.length,u[a.event_name]=a.retrive_meta,i.send(ng.extend(l,u)),r.push({name:l[a.name],type:l[a.type],size:l[a.size],blobs:s}),l[a.blobs]=s}var i,r=[],a={event_name:0,request_nextChunk:1,retrive_meta:2,name:3,size:4,chunks:5,type:6,lastModifiedDate:7};return t.send=n,t},SourceService=valueFn(function(e,t,n,i,r,a,o,s){n=n||new Date;var l=/file|blob/.test(e);this.lastModified=n&&n.getTime(),this.lastModifiedDate=n,this.name=i||(l?t.name:""),this.size=r||(l?t.size:0),this.type=a||(l?t.type:""),this.relativePath=o||"/",this.id=s,Object.defineProperties(this,{"private":{value:{},writable:!0,enumerable:!1,configurable:!0}})}),zipService=["$q","Reader",function(e,t){function n(){var e=-1,t=this;t.append=function(n){var i,r=t.table;for(i=0;i<n.length;i++)e=e>>>8^r[255&(e^n[i])]},t.get=function(){return~e}}function i(e,t){var n,i;return n=new ArrayBuffer(e),i=new Uint8Array(n),t&&i.set(t,0),{buffer:n,array:i,view:new DataView(n)}}function r(){}function a(e){function t(t){r=new Blob([],{type:e}),t()}function n(t,n){r=new Blob([r,x?t:t.buffer],{type:e}),n()}function i(e){e(r)}var r,a=this;a.init=t,a.writeUint8Array=n,a.getData=i}function o(e,t,n,i,r,a,o,s,l,u){function c(){e.removeEventListener(D,d,!1),s(p)}function d(e){var t=e.data,i=t.data;t.onappend&&(p+=i.length,n.writeUint8Array(i,function(){a(!1,i),f()},u)),t.onflush&&(i?(p+=i.length,n.writeUint8Array(i,function(){a(!1,i),c()},u)):c()),t.progress&&o&&o(_+t.current,r)}function f(){_=h*$,r>_?t.readUint8Array(i+_,Math.min($,r-_),function(t){e.postMessage({append:!0,data:t}),h++,o&&o(_,r),a(!0,t)},l):e.postMessage({flush:!0})}var _,p,h=0;p=0,e.addEventListener(D,d,!1),f()}function s(e,t,n,i,r,a,o,s,l,u){function c(){var p;d=f*$,r>d?t.readUint8Array(i+d,Math.min($,r-d),function(t){var s=e.append(t,function(){o&&o(i+d,r)});_+=s.length,a(!0,t),n.writeUint8Array(s,function(){a(!1,s),f++,setTimeout(c,1)},u),o&&o(d,r)},l):(p=e.flush(),p?(_+=p.length,n.writeUint8Array(p,function(){a(!1,p),s(_)},u)):s(_))}var d,f=0,_=0;c()}function l(e,t,i,r,a,l,u,c,d){function f(e,t){a&&!e&&h.append(t)}function _(e){l(e,h.get())}var p,h=new n;return zip.useWebWorkers?(p=new Worker(zip.workerScriptsPath+B),o(p,e,t,i,r,f,u,_,c,d)):s(new zip.Inflater,e,t,i,r,f,u,_,c,d),p}function u(e,t,i,r,a,l,u){function c(e,t){e&&p.append(t)}function d(e){r(e,p.get())}function f(){_.removeEventListener(D,f,!1),o(_,e,t,0,e.size,c,a,d,l,u)}var _,p=new n;return zip.useWebWorkers?(_=new Worker(zip.workerScriptsPath+z),_.addEventListener(D,f,!1),_.postMessage({init:!0,level:i})):s(new zip.Deflater,e,t,0,e.size,c,a,d,l,u),_}function c(e,t,i,r,a,o,s,l,u){function c(){var n=d*$;r>n?e.readUint8Array(i+n,Math.min($,r-n),function(e){a&&f.append(e),s&&s(n,r,e),t.writeUint8Array(e,function(){d++,c()},u)},l):o(r,f.get())}var d=0,f=new n;c()}function d(e){var t,n,i="",r=["Ç","ü","é","â","ä","à","å","ç","ê","ë","è","ï","î","ì","Ä","Å","É","æ","Æ","ô","ö","ò","û","ù","ÿ","Ö","Ü","ø","£","Ø","×","ƒ","á","í","ó","ú","ñ","Ñ","ª","º","¿","®","¬","½","¼","¡","«","»","_","_","_","¦","¦","Á","Â","À","©","¦","¦","+","+","¢","¥","+","+","-","-","+","-","+","ã","Ã","+","+","-","-","¦","-","+","¤","ð","Ð","Ê","Ë","È","i","Í","Î","Ï","+","+","_","_","¦","Ì","_","Ó","ß","Ô","Ò","õ","Õ","µ","þ","Þ","Ú","Û","Ù","ý","Ý","¯","´","­","±","_","¾","¶","§","÷","¸","°","¨","·","¹","³","²","_"," "];for(t=0;t<e.length;t++)n=255&e.charCodeAt(t),i+=n>127?r[n-128]:String.fromCharCode(n);return i}function f(e){return decodeURIComponent(escape(e))}function _(e){var t,n="";for(t=0;t<e.length;t++)n+=String.fromCharCode(e[t]);return n}function p(e){var t=(4294901760&e)>>16,n=65535&e;try{return new Date(1980+((65024&t)>>9),((480&t)>>5)-1,31&t,(63488&n)>>11,(2016&n)>>5,2*(31&n),0)}catch(i){}}function h(e,t,n,i,r){return e.version=t.view.getUint16(n,!0),e.bitFlag=t.view.getUint16(n+2,!0),e.compressionMethod=t.view.getUint16(n+4,!0),e.lastModDateRaw=t.view.getUint32(n+6,!0),e.lastModDate=p(e.lastModDateRaw),1===(1&e.bitFlag)?void r(k):((i||8!=(8&e.bitFlag))&&(e.crc32=t.view.getUint32(n+10,!0),e.compressedSize=t.view.getUint32(n+14,!0),e.uncompressedSize=t.view.getUint32(n+18,!0)),4294967295===e.compressedSize||4294967295===e.uncompressedSize?void r(U):(e.filenameLength=t.view.getUint16(n+22,!0),void(e.extraFieldLength=t.view.getUint16(n+24,!0))))}function v(e,t){function n(){}function r(n,a){e.readUint8Array(e.size-n,n,function(e){var t=i(e.length,e).view;1347093766!=t.getUint32(0)?r(n+1,a):a(t)},function(){t(S)})}return n.prototype.getData=function(n,r,a,o){function s(e,t){p&&p.terminate(),p=null,e&&e(t)}function u(e){var t=i(4);return t.view.setUint32(0,e),v.crc32==t.view.getUint32(0)}function d(e,t){o&&!u(t)?f():n.getData(function(e){s(r,e)})}function f(){s(t,L)}function _(){s(t,F)}var p,v=this;e.readUint8Array(v.offset,30,function(r){var s,u=i(r.length,r);return 1347093252!=u.view.getUint32(0)?void t(A):(h(v,u,4,!1,t),s=v.offset+30+v.filenameLength+v.extraFieldLength,void n.init(function(){0===v.compressionMethod?c(e,n,s,v.compressedSize,o,d,a,f,_):p=l(e,n,s,v.compressedSize,o,d,a,f,_)},_))},f)},{getEntries:function(a){return e.size<22?void t(A):void r(22,function(r){var o,s;o=r.getUint32(16,!0),s=r.getUint16(8,!0),e.readUint8Array(o,e.size-o,function(e){var r,o,l,u,c=0,p=[],v=i(e.length,e);for(r=0;s>r;r++){if(o=new n,1347092738!=v.view.getUint32(c))return void t(A);
h(o,v,c+6,!0,t),o.commentLength=v.view.getUint16(c+32,!0),o.directory=16==(16&v.view.getUint8(c+38)),o.offset=v.view.getUint32(c+42,!0),l=_(v.array.subarray(c+46,c+46+o.filenameLength)),o.filename=2048===(2048&o.bitFlag)?f(l):d(l),o.directory||"/"!=o.filename.charAt(o.filename.length-1)||(o.directory=!0),u=_(v.array.subarray(c+46+o.filenameLength+o.extraFieldLength,c+46+o.filenameLength+o.extraFieldLength+o.commentLength)),o.comment=2048===(2048&o.bitFlag)?f(u):d(u),p.push(o),c+=46+o.filenameLength+o.extraFieldLength+o.commentLength}a(p)},function(){t(S)})})},close:function(e){e&&e()}}}function b(e){return unescape(encodeURIComponent(e))}function w(e){var t,n=[];for(t=0;t<e.length;t++)n.push(e.charCodeAt(t));return n}function g(e,t,n){function r(e,t){s&&s.terminate(),s=null,e&&e(t)}function a(){r(t,R)}function o(){r(t,L)}var s,l={},d=[],f=0;return{add:function(_,p,h,v,g){function m(t){var r;U=g.lastModDate||new Date,A=i(26),l[_]={headerArray:A.array,directory:g.directory,filename:k,offset:f,comment:w(b(g.comment||""))},A.view.setUint32(0,335546376),g.version&&A.view.setUint8(0,g.version),n||0===g.level||g.directory||A.view.setUint16(4,2048),A.view.setUint16(6,(U.getHours()<<6|U.getMinutes())<<5|U.getSeconds()/2,!0),A.view.setUint16(8,(U.getFullYear()-1980<<4|U.getMonth()+1)<<5|U.getDate(),!0),A.view.setUint16(22,k.length,!0),r=i(30+k.length),r.view.setUint32(0,1347093252),r.array.set(A.array,4),r.array.set(k,30),f+=r.array.length,e.writeUint8Array(r.array,t,a)}function y(t,n){var o=i(16);f+=t||0,o.view.setUint32(0,1347094280),"undefined"!=typeof n&&(A.view.setUint32(10,n,!0),o.view.setUint32(4,n,!0)),p&&(o.view.setUint32(8,t,!0),A.view.setUint32(14,t,!0),o.view.setUint32(12,p.size,!0),A.view.setUint32(18,p.size,!0)),e.writeUint8Array(o.array,function(){f+=16,r(h)},a)}function x(){return g=g||{},_=_.trim(),g.directory&&"/"!=_.charAt(_.length-1)&&(_+="/"),l.hasOwnProperty(_)?void t(M):(k=w(b(_)),d.push(_),void m(function(){p?n||0===g.level?c(p,e,0,p.size,!0,y,v,o,a):s=u(p,e,g.level,y,v,o,a):y()},a))}var A,k,U;p?p.init(x,o):x()},close:function(t){var n,o,s,u=0,c=0;for(o=0;o<d.length;o++)s=l[d[o]],u+=46+s.filename.length+s.comment.length;for(n=i(u+22),o=0;o<d.length;o++)s=l[d[o]],n.view.setUint32(c,1347092738),n.view.setUint16(c+4,5120),n.array.set(s.headerArray,c+6),n.view.setUint16(c+32,s.comment.length,!0),s.directory&&n.view.setUint8(c+38,16),n.view.setUint32(c+42,s.offset,!0),n.array.set(s.filename,c+46),n.array.set(s.comment,c+46+s.filename.length),c+=46+s.filename.length+s.comment.length;n.view.setUint32(c,1347093766),n.view.setUint16(c+8,d.length,!0),n.view.setUint16(c+10,d.length,!0),n.view.setUint32(c+12,u,!0),n.view.setUint32(c+16,f,!0),e.writeUint8Array(n.array,function(){r(function(){e.getData(t)})},a)}}}function m(){}function y(e){function n(e){e()}function i(e,t,n){a.readAsUint8Array("bytes="+e+"-").then(n)}var r=this,a=t.BlobReader(e);r.size=e.size,r.init=n,r.readUint8Array=i}var x,A="File format is not recognized.",k="File contains encrypted entry.",U="File is using Zip64 (4gb+ file size).",S="Error while reading zip file.",R="Error while writing zip file.",F="Error while writing file data.",L="Error while reading file data.",M="File already exists.",$=524288,B="u/js/workers/inflate.js",z="u/js/workers/deflate.js",D="message";try{x=0===new Blob([new DataView(new ArrayBuffer(0))]).size}catch(I){}return n.prototype.table=function(){var e,t,n,i=[];for(e=0;256>e;e++){for(n=e,t=0;8>t;t++)1&n?n=n>>>1^3988292384:n>>>=1;i[e]=n}return i}(),r.prototype.getData=function(e){e(this.data)},a.prototype=new r,a.prototype.constructor=a,y.prototype=new m,y.prototype.constructor=y,zip={Reader:m,Writer:r,BlobWriter:a,SourceReader:y,createReader:function(e,t,n){e.init(function(){t(v(e,n))},n)},createWriter:function(e,t,n,i){e.init(function(){t(g(e,n,i))},n)},workerScriptsPath:"",useWebWorkers:!0}}];!function(e){function t(){function e(e){var t,n,r,a,o,s,u=i.dyn_tree,c=i.stat_desc.static_tree,d=i.stat_desc.extra_bits,f=i.stat_desc.extra_base,_=i.stat_desc.max_length,h=0;for(a=0;l>=a;a++)e.bl_count[a]=0;for(u[2*e.heap[e.heap_max]+1]=0,t=e.heap_max+1;p>t;t++)n=e.heap[t],a=u[2*u[2*n+1]+1]+1,a>_&&(a=_,h++),u[2*n+1]=a,n>i.max_code||(e.bl_count[a]++,o=0,n>=f&&(o=d[n-f]),s=u[2*n],e.opt_len+=s*(a+o),c&&(e.static_len+=s*(c[2*n+1]+o)));if(0!==h){do{for(a=_-1;0===e.bl_count[a];)a--;e.bl_count[a]--,e.bl_count[a+1]+=2,e.bl_count[_]--,h-=2}while(h>0);for(a=_;0!==a;a--)for(n=e.bl_count[a];0!==n;)r=e.heap[--t],r>i.max_code||(u[2*r+1]!=a&&(e.opt_len+=(a-u[2*r+1])*u[2*r],u[2*r+1]=a),n--)}}function t(e,t){var n=0;do n|=1&e,e>>>=1,n<<=1;while(--t>0);return n>>>1}function n(e,n,i){var r,a,o,s=[],u=0;for(r=1;l>=r;r++)s[r]=u=u+i[r-1]<<1;for(a=0;n>=a;a++)o=e[2*a+1],0!==o&&(e[2*a]=t(s[o]++,o))}var i=this;i.build_tree=function(t){var r,a,o,s=i.dyn_tree,l=i.stat_desc.static_tree,u=i.stat_desc.elems,c=-1;for(t.heap_len=0,t.heap_max=p,r=0;u>r;r++)0!==s[2*r]?(t.heap[++t.heap_len]=c=r,t.depth[r]=0):s[2*r+1]=0;for(;t.heap_len<2;)o=t.heap[++t.heap_len]=2>c?++c:0,s[2*o]=1,t.depth[o]=0,t.opt_len--,l&&(t.static_len-=l[2*o+1]);for(i.max_code=c,r=Math.floor(t.heap_len/2);r>=1;r--)t.pqdownheap(s,r);o=u;do r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],t.pqdownheap(s,1),a=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=a,s[2*o]=s[2*r]+s[2*a],t.depth[o]=Math.max(t.depth[r],t.depth[a])+1,s[2*r+1]=s[2*a+1]=o,t.heap[1]=o++,t.pqdownheap(s,1);while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],e(t),n(s,i.max_code,t.bl_count)}}function n(e,t,n,i,r){var a=this;a.static_tree=e,a.extra_bits=t,a.extra_base=n,a.elems=i,a.max_length=r}function i(e,t,n,i,r){var a=this;a.good_length=e,a.max_lazy=t,a.nice_length=n,a.max_chain=i,a.func=r}function r(e,t,n,i){var r=e[2*t],a=e[2*n];return a>r||r==a&&i[t]<=i[n]}function a(){function e(){var e;for(Mt=2*St,Bt[Dt-1]=0,e=0;Dt-1>e;e++)Bt[e]=0;Gt=j[Kt].max_lazy,Yt=j[Kt].good_length,Jt=j[Kt].nice_length,Vt=j[Kt].max_chain,Ot=0,Tt=0,Ht=0,Pt=Wt=tt-1,jt=0,zt=0}function i(){var e;for(e=0;_>e;e++)Zt[2*e]=0;for(e=0;u>e;e++)Qt[2*e]=0;for(e=0;c>e;e++)en[2*e]=0;Zt[2*h]=1,tn.opt_len=tn.static_len=0,ln=cn=0}function a(){nn.dyn_tree=Zt,nn.stat_desc=n.static_l_desc,rn.dyn_tree=Qt,rn.stat_desc=n.static_d_desc,an.dyn_tree=en,an.stat_desc=n.static_bl_desc,fn=0,_n=0,dn=8,i()}function o(e,t){var n,i,r=-1,a=e[1],o=0,s=7,l=4;for(0===a&&(s=138,l=3),e[2*(t+1)+1]=65535,n=0;t>=n;n++)i=a,a=e[2*(n+1)+1],++o<s&&i==a||(l>o?en[2*i]+=o:0!==i?(i!=r&&en[2*i]++,en[2*b]++):10>=o?en[2*w]++:en[2*g]++,o=0,r=i,0===a?(s=138,l=3):i==a?(s=6,l=3):(s=7,l=4))}function s(){var e;for(o(Zt,nn.max_code),o(Qt,rn.max_code),an.build_tree(tn),e=c-1;e>=3&&0===en[2*t.bl_order[e]+1];e--);return tn.opt_len+=3*(e+1)+5+5+4,e}function l(e){tn.pending_buf[tn.pending++]=e}function d(e){l(255&e),l(e>>>8&255)}function p(e){l(e>>8&255),l(255&e&255)}function v(e,t){var n,i=t;_n>m-i?(n=e,fn|=n<<_n&65535,d(fn),fn=n>>>m-_n,_n+=i-m):(fn|=e<<_n&65535,_n+=i)}function I(e,t){var n=2*e;v(65535&t[n],65535&t[n+1])}function rt(e,t){var n,i,r=-1,a=e[1],o=0,s=7,l=4;for(0===a&&(s=138,l=3),n=0;t>=n;n++)if(i=a,a=e[2*(n+1)+1],!(++o<s&&i==a)){if(l>o){do I(i,en);while(0!==--o)}else 0!==i?(i!=r&&(I(i,en),o--),I(b,en),v(o-3,2)):10>=o?(I(w,en),v(o-3,3)):(I(g,en),v(o-11,7));o=0,r=i,0===a?(s=138,l=3):i==a?(s=6,l=3):(s=7,l=4)}}function at(e,n,i){var r;for(v(e-257,5),v(n-1,5),v(i-4,4),r=0;i>r;r++)v(en[2*t.bl_order[r]+1],3);rt(Zt,e-1),rt(Qt,n-1)}function ot(){16==_n?(d(fn),fn=0,_n=0):_n>=8&&(l(255&fn),fn>>>=8,_n-=8)}function st(){v(Q<<1,3),I(h,n.static_ltree),ot(),9>1+dn+10-_n&&(v(Q<<1,3),I(h,n.static_ltree),ot()),dn=7}function lt(e,n){var i,r,a;if(tn.pending_buf[un+2*ln]=e>>>8&255,tn.pending_buf[un+2*ln+1]=255&e,tn.pending_buf[on+ln]=255&n,ln++,0===e?Zt[2*n]++:(cn++,e--,Zt[2*(t._length_code[n]+f+1)]++,Qt[2*t.d_code(e)]++),0===(8191&ln)&&Kt>2){for(i=8*ln,r=Ot-Tt,a=0;u>a;a++)i+=Qt[2*a]*(5+t.extra_dbits[a]);if(i>>>=3,cn<Math.floor(ln/2)&&i<Math.floor(r/2))return!0}return ln==sn-1}function ut(e,n){var i,r,a,o,s=0;if(0!==ln)do i=tn.pending_buf[un+2*s]<<8&65280|255&tn.pending_buf[un+2*s+1],r=255&tn.pending_buf[on+s],s++,0===i?I(r,e):(a=t._length_code[r],I(a+f+1,e),o=t.extra_lbits[a],0!==o&&(r-=t.base_length[a],v(r,o)),i--,a=t.d_code(i),I(a,n),o=t.extra_dbits[a],0!==o&&(i-=t.base_dist[a],v(i,o)));while(ln>s);I(h,e),dn=e[2*h+1]}function ct(){_n>8?d(fn):_n>0&&l(255&fn),fn=0,_n=0}function dt(e,t,n){ct(),dn=8,n&&(d(t),d(~t)),tn.pending_buf.set(Lt.subarray(e,e+t),tn.pending),tn.pending+=t}function ft(e,t,n){v((Z<<1)+(n?1:0),3),dt(e,t,!0)}function _t(e,t,r){var a,o,l=0;Kt>0?(nn.build_tree(tn),rn.build_tree(tn),l=s(),a=tn.opt_len+3+7>>>3,o=tn.static_len+3+7>>>3,a>=o&&(a=o)):a=o=t+5,a>=t+4&&-1!=e?ft(e,t,r):o==a?(v((Q<<1)+(r?1:0),3),ut(n.static_ltree,n.static_dtree)):(v((et<<1)+(r?1:0),3),at(nn.max_code+1,rn.max_code+1,l+1),ut(Zt,Qt)),i(),r&&ct()}function pt(e){_t(Tt>=0?Tt:-1,Ot-Tt,e),Tt=Ot,yt.flush_pending()}function ht(){var e,t,n,i;do{if(i=Mt-Ht-Ot,0===i&&0===Ot&&0===Ht)i=St;else if(-1==i)i--;else if(Ot>=St+St-it){Lt.set(Lt.subarray(St,St+St),0),Nt-=St,Ot-=St,Tt-=St,e=Dt,n=e;do t=65535&Bt[--n],Bt[n]=t>=St?t-St:0;while(0!==--e);e=St,n=e;do t=65535&$t[--n],$t[n]=t>=St?t-St:0;while(0!==--e);i+=St}if(0===yt.avail_in)return;e=yt.read_buf(Lt,Ot+Ht,i),Ht+=e,Ht>=tt&&(zt=255&Lt[Ot],zt=(zt<<Et^255&Lt[Ot+1])&Ct)}while(it>Ht&&0!==yt.avail_in)}function vt(e){var t,n=65535;for(n>At-5&&(n=At-5);;){if(1>=Ht){if(ht(),0===Ht&&e==U)return N;if(0===Ht)break}if(Ot+=Ht,Ht=0,t=Tt+n,(0===Ot||Ot>=t)&&(Ht=Ot-t,Ot=t,pt(!1),0===yt.avail_out))return N;if(Ot-Tt>=St-it&&(pt(!1),0===yt.avail_out))return N}return pt(e==F),0===yt.avail_out?e==F?W:N:e==F?V:H}function bt(e){var t,n,i=Vt,r=Ot,a=Wt,o=Ot>St-it?Ot-(St-it):0,s=Jt,l=Ft,u=Ot+nt,c=Lt[r+a-1],d=Lt[r+a];Wt>=Yt&&(i>>=2),s>Ht&&(s=Ht);do if(t=e,Lt[t+a]==d&&Lt[t+a-1]==c&&Lt[t]==Lt[r]&&Lt[++t]==Lt[r+1]){r+=2,t++;do;while(Lt[++r]==Lt[++t]&&Lt[++r]==Lt[++t]&&Lt[++r]==Lt[++t]&&Lt[++r]==Lt[++t]&&Lt[++r]==Lt[++t]&&Lt[++r]==Lt[++t]&&Lt[++r]==Lt[++t]&&Lt[++r]==Lt[++t]&&u>r);if(n=nt-(u-r),r=u-nt,n>a){if(Nt=e,a=n,n>=s)break;c=Lt[r+a-1],d=Lt[r+a]}}while((e=65535&$t[e&l])>o&&0!==--i);return Ht>=a?a:Ht}function wt(e){for(var t,n=0;;){if(it>Ht){if(ht(),it>Ht&&e==U)return N;if(0===Ht)break}if(Ht>=tt&&(zt=(zt<<Et^255&Lt[Ot+(tt-1)])&Ct,n=65535&Bt[zt],$t[Ot&Ft]=Bt[zt],Bt[zt]=Ot),0!==n&&St-it>=(Ot-n&65535)&&Xt!=A&&(Pt=bt(n)),Pt>=tt)if(t=lt(Ot-Nt,Pt-tt),Ht-=Pt,Gt>=Pt&&Ht>=tt){Pt--;do Ot++,zt=(zt<<Et^255&Lt[Ot+(tt-1)])&Ct,n=65535&Bt[zt],$t[Ot&Ft]=Bt[zt],Bt[zt]=Ot;while(0!==--Pt);Ot++}else Ot+=Pt,Pt=0,zt=255&Lt[Ot],zt=(zt<<Et^255&Lt[Ot+1])&Ct;else t=lt(0,255&Lt[Ot]),Ht--,Ot++;if(t&&(pt(!1),0===yt.avail_out))return N}return pt(e==F),0===yt.avail_out?e==F?W:N:e==F?V:H}function gt(e){for(var t,n,i=0;;){if(it>Ht){if(ht(),it>Ht&&e==U)return N;if(0===Ht)break}if(Ht>=tt&&(zt=(zt<<Et^255&Lt[Ot+(tt-1)])&Ct,i=65535&Bt[zt],$t[Ot&Ft]=Bt[zt],Bt[zt]=Ot),Wt=Pt,qt=Nt,Pt=tt-1,0!==i&&Gt>Wt&&St-it>=(Ot-i&65535)&&(Xt!=A&&(Pt=bt(i)),5>=Pt&&(Xt==x||Pt==tt&&Ot-Nt>4096)&&(Pt=tt-1)),Wt>=tt&&Wt>=Pt){n=Ot+Ht-tt,t=lt(Ot-1-qt,Wt-tt),Ht-=Wt-1,Wt-=2;do++Ot<=n&&(zt=(zt<<Et^255&Lt[Ot+(tt-1)])&Ct,i=65535&Bt[zt],$t[Ot&Ft]=Bt[zt],Bt[zt]=Ot);while(0!==--Wt);if(jt=0,Pt=tt-1,Ot++,t&&(pt(!1),0===yt.avail_out))return N}else if(0!==jt){if(t=lt(0,255&Lt[Ot-1]),t&&pt(!1),Ot++,Ht--,0===yt.avail_out)return N}else jt=1,Ot++,Ht--}return 0!==jt&&(t=lt(0,255&Lt[Ot-1]),jt=0),pt(e==F),0===yt.avail_out?e==F?W:N:e==F?V:H}function mt(t){return t.total_in=t.total_out=0,t.msg=null,tn.pending=0,tn.pending_out=0,xt=X,Ut=U,a(),e(),L}var yt,xt,At,kt,Ut,St,Rt,Ft,Lt,Mt,$t,Bt,zt,Dt,It,Ct,Et,Tt,Pt,qt,jt,Ot,Nt,Ht,Wt,Vt,Gt,Kt,Xt,Yt,Jt,Zt,Qt,en,tn=this,nn=new t,rn=new t,an=new t;tn.depth=[];var on,sn,ln,un,cn,dn,fn,_n;tn.bl_count=[],tn.heap=[],Zt=[],Qt=[],en=[],tn.pqdownheap=function(e,t){for(var n=tn.heap,i=n[t],a=t<<1;a<=tn.heap_len&&(a<tn.heap_len&&r(e,n[a+1],n[a],tn.depth)&&a++,!r(e,i,n[a],tn.depth));)n[t]=n[a],t=a,a<<=1;n[t]=i},tn.deflateInit=function(e,t,n,i,r,a){return i||(i=J),r||(r=E),a||(a=k),e.msg=null,t==y&&(t=6),1>r||r>C||i!=J||9>n||n>15||0>t||t>9||0>a||a>A?B:(e.dstate=tn,Rt=n,St=1<<Rt,Ft=St-1,It=r+7,Dt=1<<It,Ct=Dt-1,Et=Math.floor((It+tt-1)/tt),Lt=new Uint8Array(2*St),$t=[],Bt=[],sn=1<<r+6,tn.pending_buf=new Uint8Array(4*sn),At=4*sn,un=Math.floor(sn/2),on=3*sn,Kt=t,Xt=a,kt=255&i,mt(e))},tn.deflateEnd=function(){return xt!=K&&xt!=X&&xt!=Y?B:(tn.pending_buf=null,Bt=null,$t=null,Lt=null,tn.dstate=null,xt==X?z:L)},tn.deflateParams=function(e,t,n){var i=L;return t==y&&(t=6),0>t||t>9||0>n||n>A?B:(j[Kt].func!=j[t].func&&0!==e.total_in&&(i=e.deflate(S)),Kt!=t&&(Kt=t,Gt=j[Kt].max_lazy,Yt=j[Kt].good_length,Jt=j[Kt].nice_length,Vt=j[Kt].max_chain),Xt=n,i)},tn.deflateSetDictionary=function(e,t,n){var i,r=n,a=0;if(!t||xt!=K)return B;if(tt>r)return L;for(r>St-it&&(r=St-it,a=n-r),Lt.set(t.subarray(a,a+r),0),Ot=r,Tt=r,zt=255&Lt[0],zt=(zt<<Et^255&Lt[1])&Ct,i=0;r-tt>=i;i++)zt=(zt<<Et^255&Lt[i+(tt-1)])&Ct,$t[i&Ft]=Bt[zt],Bt[zt]=i;return L},tn.deflate=function(e,t){var n,i,r,a,o;if(t>F||0>t)return B;if(!e.next_out||!e.next_in&&0!==e.avail_in||xt==Y&&t!=F)return e.msg=O[$-B],B;if(0===e.avail_out)return e.msg=O[$-D],D;if(yt=e,a=Ut,Ut=t,xt==K&&(i=J+(Rt-8<<4)<<8,r=(Kt-1&255)>>1,r>3&&(r=3),i|=r<<6,0!==Ot&&(i|=G),i+=31-i%31,xt=X,p(i)),0!==tn.pending){if(yt.flush_pending(),0===yt.avail_out)return Ut=-1,L}else if(0===yt.avail_in&&a>=t&&t!=F)return yt.msg=O[$-D],D;if(xt==Y&&0!==yt.avail_in)return e.msg=O[$-D],D;if(0!==yt.avail_in||0!==Ht||t!=U&&xt!=Y){switch(o=-1,j[Kt].func){case T:o=vt(t);break;case P:o=wt(t);break;case q:o=gt(t)}if((o==W||o==V)&&(xt=Y),o==N||o==W)return 0===yt.avail_out&&(Ut=-1),L;if(o==H){if(t==S)st();else if(ft(0,0,!1),t==R)for(n=0;Dt>n;n++)Bt[n]=0;if(yt.flush_pending(),0===yt.avail_out)return Ut=-1,L}}return t!=F?L:M}}function o(){var e=this;e.next_in_index=0,e.next_out_index=0,e.avail_in=0,e.total_in=0,e.avail_out=0,e.total_out=0}function s(e){var t=this,n=new o,i=512,r=U,a=new Uint8Array(i);"undefined"==typeof e&&(e=y),n.deflateInit(e),n.next_out=a,t.append=function(e,t){var o,s,l=[],u=0,c=0,d=0;if(e.length){n.next_in_index=0,n.next_in=e,n.avail_in=e.length;do{if(n.next_out_index=0,n.avail_out=i,o=n.deflate(r),o!=L)throw"deflating: "+n.msg;n.next_out_index&&l.push(n.next_out_index==i?new Uint8Array(a):new Uint8Array(a.subarray(0,n.next_out_index))),d+=n.next_out_index,t&&n.next_in_index>0&&n.next_in_index!=u&&(t(n.next_in_index),u=n.next_in_index)}while(n.avail_in>0||0===n.avail_out);return s=new Uint8Array(d),l.forEach(function(e){s.set(e,c),c+=e.length}),s}},t.flush=function(){var e,t,r=[],o=0,s=0;do{if(n.next_out_index=0,n.avail_out=i,e=n.deflate(F),e!=M&&e!=L)throw"deflating: "+n.msg;i-n.avail_out>0&&r.push(new Uint8Array(a.subarray(0,n.next_out_index))),s+=n.next_out_index}while(n.avail_in>0||0===n.avail_out);return n.deflateEnd(),t=new Uint8Array(s),r.forEach(function(e){t.set(e,o),o+=e.length}),t}}var l=15,u=30,c=19,d=29,f=256,_=f+1+d,p=2*_+1,h=256,v=7,b=16,w=17,g=18,m=16,y=-1,x=1,A=2,k=0,U=0,S=1,R=3,F=4,L=0,M=1,$=2,B=-2,z=-3,D=-5,I=[0,1,2,3,4,4,5,5,6,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,16,17,18,18,19,19,20,20,20,20,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29];t._length_code=[0,1,2,3,4,5,6,7,8,8,9,9,10,10,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28],t.base_length=[0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0],t.base_dist=[0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576],t.d_code=function(e){return 256>e?I[e]:I[256+(e>>>7)]},t.extra_lbits=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],t.extra_dbits=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],t.extra_blbits=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],t.bl_order=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],n.static_ltree=[12,8,140,8,76,8,204,8,44,8,172,8,108,8,236,8,28,8,156,8,92,8,220,8,60,8,188,8,124,8,252,8,2,8,130,8,66,8,194,8,34,8,162,8,98,8,226,8,18,8,146,8,82,8,210,8,50,8,178,8,114,8,242,8,10,8,138,8,74,8,202,8,42,8,170,8,106,8,234,8,26,8,154,8,90,8,218,8,58,8,186,8,122,8,250,8,6,8,134,8,70,8,198,8,38,8,166,8,102,8,230,8,22,8,150,8,86,8,214,8,54,8,182,8,118,8,246,8,14,8,142,8,78,8,206,8,46,8,174,8,110,8,238,8,30,8,158,8,94,8,222,8,62,8,190,8,126,8,254,8,1,8,129,8,65,8,193,8,33,8,161,8,97,8,225,8,17,8,145,8,81,8,209,8,49,8,177,8,113,8,241,8,9,8,137,8,73,8,201,8,41,8,169,8,105,8,233,8,25,8,153,8,89,8,217,8,57,8,185,8,121,8,249,8,5,8,133,8,69,8,197,8,37,8,165,8,101,8,229,8,21,8,149,8,85,8,213,8,53,8,181,8,117,8,245,8,13,8,141,8,77,8,205,8,45,8,173,8,109,8,237,8,29,8,157,8,93,8,221,8,61,8,189,8,125,8,253,8,19,9,275,9,147,9,403,9,83,9,339,9,211,9,467,9,51,9,307,9,179,9,435,9,115,9,371,9,243,9,499,9,11,9,267,9,139,9,395,9,75,9,331,9,203,9,459,9,43,9,299,9,171,9,427,9,107,9,363,9,235,9,491,9,27,9,283,9,155,9,411,9,91,9,347,9,219,9,475,9,59,9,315,9,187,9,443,9,123,9,379,9,251,9,507,9,7,9,263,9,135,9,391,9,71,9,327,9,199,9,455,9,39,9,295,9,167,9,423,9,103,9,359,9,231,9,487,9,23,9,279,9,151,9,407,9,87,9,343,9,215,9,471,9,55,9,311,9,183,9,439,9,119,9,375,9,247,9,503,9,15,9,271,9,143,9,399,9,79,9,335,9,207,9,463,9,47,9,303,9,175,9,431,9,111,9,367,9,239,9,495,9,31,9,287,9,159,9,415,9,95,9,351,9,223,9,479,9,63,9,319,9,191,9,447,9,127,9,383,9,255,9,511,9,0,7,64,7,32,7,96,7,16,7,80,7,48,7,112,7,8,7,72,7,40,7,104,7,24,7,88,7,56,7,120,7,4,7,68,7,36,7,100,7,20,7,84,7,52,7,116,7,3,8,131,8,67,8,195,8,35,8,163,8,99,8,227,8],n.static_dtree=[0,5,16,5,8,5,24,5,4,5,20,5,12,5,28,5,2,5,18,5,10,5,26,5,6,5,22,5,14,5,30,5,1,5,17,5,9,5,25,5,5,5,21,5,13,5,29,5,3,5,19,5,11,5,27,5,7,5,23,5],n.static_l_desc=new n(n.static_ltree,t.extra_lbits,f+1,_,l),n.static_d_desc=new n(n.static_dtree,t.extra_dbits,0,u,l),n.static_bl_desc=new n(null,t.extra_blbits,0,c,v);var C=9,E=8,T=0,P=1,q=2,j=[new i(0,0,0,0,T),new i(4,4,8,4,P),new i(4,5,16,8,P),new i(4,6,32,32,P),new i(4,4,16,16,q),new i(8,16,32,32,q),new i(8,16,128,128,q),new i(8,32,128,256,q),new i(32,128,258,1024,q),new i(32,258,258,4096,q)],O=["need dictionary","stream end","","","stream error","data error","","buffer error","",""],N=0,H=1,W=2,V=3,G=32,K=42,X=113,Y=666,J=8,Z=0,Q=1,et=2,tt=3,nt=258,it=nt+tt+1;o.prototype={deflateInit:function(e,t){var n=this;return n.dstate=new a,t||(t=l),n.dstate.deflateInit(n,e,t)},deflate:function(e){var t=this;return t.dstate?t.dstate.deflate(t,e):B},deflateEnd:function(){var e=this;if(!e.dstate)return B;var t=e.dstate.deflateEnd();return e.dstate=null,t},deflateParams:function(e,t){var n=this;return n.dstate?n.dstate.deflateParams(n,e,t):B},deflateSetDictionary:function(e,t){var n=this;return n.dstate?n.dstate.deflateSetDictionary(n,e,t):B},read_buf:function(e,t,n){var i=this,r=i.avail_in;return r>n&&(r=n),0===r?0:(i.avail_in-=r,e.set(i.next_in.subarray(i.next_in_index,i.next_in_index+r),t),i.next_in_index+=r,i.total_in+=r,r)},flush_pending:function(){var e=this,t=e.dstate.pending;t>e.avail_out&&(t=e.avail_out),0!==t&&(e.next_out.set(e.dstate.pending_buf.subarray(e.dstate.pending_out,e.dstate.pending_out+t),e.next_out_index),e.next_out_index+=t,e.dstate.pending_out+=t,e.total_out+=t,e.avail_out-=t,e.dstate.pending-=t,0===e.dstate.pending&&(e.dstate.pending_out=0))}};var rt;e.zip?e.zip.Deflater=s:(rt=new s,e.addEventListener("message",function(t){var n=t.data;n.init&&(rt=new s(n.level),e.postMessage({oninit:!0})),n.append&&e.postMessage({onappend:!0,data:rt.append(n.data,function(t){e.postMessage({progress:!0,current:t})})}),n.flush&&e.postMessage({onflush:!0,data:rt.flush()})},!1))}(this),function(e){function t(){function e(e,t,n,i,u,c,d,_,h,b,w){var g,m,y,x,A,k,U,S,F,L,M,$,B,z,D;L=0,A=n;do r[e[t+L]]++,L++,A--;while(0!==A);if(r[0]==n)return d[0]=-1,_[0]=0,l;for(S=_[0],k=1;R>=k&&0===r[k];k++);for(U=k,k>S&&(S=k),A=R;0!==A&&0===r[A];A--);for(y=A,S>A&&(S=A),_[0]=S,z=1<<k;A>k;k++,z<<=1)if((z-=r[k])<0)return f;if((z-=r[A])<0)return f;for(r[A]+=z,s[1]=k=0,L=1,B=2;0!==--A;)s[B]=k+=r[L],B++,L++;A=0,L=0;do 0!==(k=e[t+L])&&(w[s[k]++]=A),L++;while(++A<n);for(n=s[y],s[0]=A=0,L=0,x=-1,$=-S,o[0]=0,M=0,D=0;y>=U;U++)for(g=r[U];0!==g--;){for(;U>$+S;){if(x++,$+=S,D=y-$,D=D>S?S:D,(m=1<<(k=U-$))>g+1&&(m-=g+1,B=U,D>k))for(;++k<D&&!((m<<=1)<=r[++B]);)m-=r[B];if(D=1<<k,b[0]+D>v)return f;o[x]=M=b[0],b[0]+=D,0!==x?(s[x]=A,a[0]=k,a[1]=S,k=A>>>$-S,a[2]=M-o[x-1]-k,h.set(a,3*(o[x-1]+k))):d[0]=M}for(a[1]=U-$,L>=n?a[0]=192:w[L]<i?(a[0]=w[L]<256?0:96,a[2]=w[L++]):(a[0]=c[w[L]-i]+16+64,a[2]=u[w[L++]-i]),m=1<<U-$,k=A>>>$;D>k;k+=m)h.set(a,3*(M+k));for(k=1<<U-1;0!==(A&k);k>>>=1)A^=k;for(A^=k,F=(1<<$)-1;(A&F)!=s[x];)x--,$-=S,F=(1<<$)-1}return 0!==z&&1!=y?p:l}function t(e){var t;for(n||(n=[],i=[],r=new Int32Array(R+1),a=[],o=new Int32Array(R),s=new Int32Array(R+1)),i.length<e&&(i=[]),t=0;e>t;t++)i[t]=0;for(t=0;R+1>t;t++)r[t]=0;for(t=0;3>t;t++)a[t]=0;o.set(r.subarray(0,R),0),s.set(r.subarray(0,R+1),0)}var n,i,r,a,o,s,u=this;u.inflate_trees_bits=function(r,a,o,s,l){var u;return t(19),n[0]=0,u=e(r,0,19,19,null,null,o,a,s,n,i),u==f?l.msg="oversubscribed dynamic bit lengths tree":(u==p||0===a[0])&&(l.msg="incomplete dynamic bit lengths tree",u=f),u},u.inflate_trees_dynamic=function(r,a,o,s,u,c,d,h,v){var b;return t(288),n[0]=0,b=e(o,0,r,257,A,k,c,s,h,n,i),b!=l||0===s[0]?(b==f?v.msg="oversubscribed literal/length tree":b!=_&&(v.msg="incomplete literal/length tree",b=f),b):(t(288),b=e(o,r,a,0,U,S,d,u,h,n,i),b!=l||0===u[0]&&r>257?(b==f?v.msg="oversubscribed distance tree":b==p?(v.msg="incomplete distance tree",b=f):b!=_&&(v.msg="empty distance tree with lengths",b=f),b):l)}}function n(){function e(e,t,n,i,r,a,o,s){var c,d,_,p,v,b,w,g,m,y,x,A,k,U,S,R;w=s.next_in_index,g=s.avail_in,v=o.bitb,b=o.bitk,m=o.write,y=m<o.read?o.read-m-1:o.end-m,x=h[e],A=h[t];do{for(;20>b;)g--,v|=(255&s.read_byte(w++))<<b,b+=8;if(c=v&x,d=n,_=i,R=3*(_+c),0!==(p=d[R]))for(;;){if(v>>=d[R+1],b-=d[R+1],0!==(16&p)){for(p&=15,k=d[R+2]+(v&h[p]),v>>=p,b-=p;15>b;)g--,v|=(255&s.read_byte(w++))<<b,b+=8;for(c=v&A,d=r,_=a,R=3*(_+c),p=d[R];;){if(v>>=d[R+1],b-=d[R+1],0!==(16&p)){for(p&=15;p>b;)g--,v|=(255&s.read_byte(w++))<<b,b+=8;if(U=d[R+2]+(v&h[p]),v>>=p,b-=p,y-=k,m>=U)S=m-U,m-S>0&&2>m-S?(o.window[m++]=o.window[S++],o.window[m++]=o.window[S++],k-=2):(o.window.set(o.window.subarray(S,S+2),m),m+=2,S+=2,k-=2);else{S=m-U;do S+=o.end;while(0>S);if(p=o.end-S,k>p){if(k-=p,m-S>0&&p>m-S){do o.window[m++]=o.window[S++];while(0!==--p)}else o.window.set(o.window.subarray(S,S+p),m),m+=p,S+=p,p=0;S=0}}if(m-S>0&&k>m-S){do o.window[m++]=o.window[S++];while(0!==--k)}else o.window.set(o.window.subarray(S,S+k),m),m+=k,S+=k,k=0;break}if(0!==(64&p))return s.msg="invalid distance code",k=s.avail_in-g,k=k>b>>3?b>>3:k,g+=k,w-=k,b-=k<<3,o.bitb=v,o.bitk=b,s.avail_in=g,s.total_in+=w-s.next_in_index,s.next_in_index=w,o.write=m,f;c+=d[R+2],c+=v&h[p],R=3*(_+c),p=d[R]}break}if(0!==(64&p))return 0!==(32&p)?(k=s.avail_in-g,k=k>b>>3?b>>3:k,g+=k,w-=k,b-=k<<3,o.bitb=v,o.bitk=b,s.avail_in=g,s.total_in+=w-s.next_in_index,s.next_in_index=w,o.write=m,u):(s.msg="invalid literal/length code",k=s.avail_in-g,k=k>b>>3?b>>3:k,g+=k,w-=k,b-=k<<3,o.bitb=v,o.bitk=b,s.avail_in=g,s.total_in+=w-s.next_in_index,s.next_in_index=w,o.write=m,f);if(c+=d[R+2],c+=v&h[p],R=3*(_+c),0===(p=d[R])){v>>=d[R+1],b-=d[R+1],o.window[m++]=d[R+2],y--;break}}else v>>=d[R+1],b-=d[R+1],o.window[m++]=d[R+2],y--}while(y>=258&&g>=10);return k=s.avail_in-g,k=k>b>>3?b>>3:k,g+=k,w-=k,b-=k<<3,o.bitb=v,o.bitk=b,s.avail_in=g,s.total_in+=w-s.next_in_index,s.next_in_index=w,o.write=m,l}var t,n,i,r,a=this,o=0,s=0,c=0,_=0,p=0,v=0,b=0,w=0,g=0,m=0;a.init=function(e,a,o,s,l,u){t=F,b=e,w=a,i=o,g=s,r=l,m=u,n=null},a.proc=function(a,y,x){var A,k,U,S,R,T,P,q=0,j=0,O=0;for(O=y.next_in_index,S=y.avail_in,q=a.bitb,j=a.bitk,R=a.write,T=R<a.read?a.read-R-1:a.end-R;;)switch(t){case F:if(T>=258&&S>=10&&(a.bitb=q,a.bitk=j,y.avail_in=S,y.total_in+=O-y.next_in_index,y.next_in_index=O,a.write=R,x=e(b,w,i,g,r,m,a,y),O=y.next_in_index,S=y.avail_in,q=a.bitb,j=a.bitk,R=a.write,T=R<a.read?a.read-R-1:a.end-R,x!=l)){t=x==u?I:E;break}c=b,n=i,s=g,t=L;case L:for(A=c;A>j;){if(0===S)return a.bitb=q,a.bitk=j,y.avail_in=S,y.total_in+=O-y.next_in_index,y.next_in_index=O,a.write=R,a.inflate_flush(y,x);x=l,S--,q|=(255&y.read_byte(O++))<<j,j+=8}if(k=3*(s+(q&h[A])),q>>>=n[k+1],j-=n[k+1],U=n[k],0===U){_=n[k+2],t=D;break}if(0!==(16&U)){p=15&U,o=n[k+2],t=M;break}if(0===(64&U)){c=U,s=k/3+n[k+2];break}if(0!==(32&U)){t=I;break}return t=E,y.msg="invalid literal/length code",x=f,a.bitb=q,a.bitk=j,y.avail_in=S,y.total_in+=O-y.next_in_index,y.next_in_index=O,a.write=R,a.inflate_flush(y,x);case M:for(A=p;A>j;){if(0===S)return a.bitb=q,a.bitk=j,y.avail_in=S,y.total_in+=O-y.next_in_index,y.next_in_index=O,a.write=R,a.inflate_flush(y,x);x=l,S--,q|=(255&y.read_byte(O++))<<j,j+=8}o+=q&h[A],q>>=A,j-=A,c=w,n=r,s=m,t=$;case $:for(A=c;A>j;){if(0===S)return a.bitb=q,a.bitk=j,y.avail_in=S,y.total_in+=O-y.next_in_index,y.next_in_index=O,a.write=R,a.inflate_flush(y,x);x=l,S--,q|=(255&y.read_byte(O++))<<j,j+=8}if(k=3*(s+(q&h[A])),q>>=n[k+1],j-=n[k+1],U=n[k],0!==(16&U)){p=15&U,v=n[k+2],t=B;break}if(0===(64&U)){c=U,s=k/3+n[k+2];break}return t=E,y.msg="invalid distance code",x=f,a.bitb=q,a.bitk=j,y.avail_in=S,y.total_in+=O-y.next_in_index,y.next_in_index=O,a.write=R,a.inflate_flush(y,x);case B:for(A=p;A>j;){if(0===S)return a.bitb=q,a.bitk=j,y.avail_in=S,y.total_in+=O-y.next_in_index,y.next_in_index=O,a.write=R,a.inflate_flush(y,x);x=l,S--,q|=(255&y.read_byte(O++))<<j,j+=8}v+=q&h[A],q>>=A,j-=A,t=z;case z:for(P=R-v;0>P;)P+=a.end;for(;0!==o;){if(0===T&&(R==a.end&&0!==a.read&&(R=0,T=R<a.read?a.read-R-1:a.end-R),0===T&&(a.write=R,x=a.inflate_flush(y,x),R=a.write,T=R<a.read?a.read-R-1:a.end-R,R==a.end&&0!==a.read&&(R=0,T=R<a.read?a.read-R-1:a.end-R),0===T)))return a.bitb=q,a.bitk=j,y.avail_in=S,y.total_in+=O-y.next_in_index,y.next_in_index=O,a.write=R,a.inflate_flush(y,x);a.window[R++]=a.window[P++],T--,P==a.end&&(P=0),o--}t=F;break;case D:if(0===T&&(R==a.end&&0!==a.read&&(R=0,T=R<a.read?a.read-R-1:a.end-R),0===T&&(a.write=R,x=a.inflate_flush(y,x),R=a.write,T=R<a.read?a.read-R-1:a.end-R,R==a.end&&0!==a.read&&(R=0,T=R<a.read?a.read-R-1:a.end-R),0===T)))return a.bitb=q,a.bitk=j,y.avail_in=S,y.total_in+=O-y.next_in_index,y.next_in_index=O,a.write=R,a.inflate_flush(y,x);x=l,a.window[R++]=_,T--,t=F;break;case I:if(j>7&&(j-=8,S++,O--),a.write=R,x=a.inflate_flush(y,x),R=a.write,T=R<a.read?a.read-R-1:a.end-R,a.read!=a.write)return a.bitb=q,a.bitk=j,y.avail_in=S,y.total_in+=O-y.next_in_index,y.next_in_index=O,a.write=R,a.inflate_flush(y,x);t=C;case C:return x=u,a.bitb=q,a.bitk=j,y.avail_in=S,y.total_in+=O-y.next_in_index,y.next_in_index=O,a.write=R,a.inflate_flush(y,x);case E:return x=f,a.bitb=q,a.bitk=j,y.avail_in=S,y.total_in+=O-y.next_in_index,y.next_in_index=O,a.write=R,a.inflate_flush(y,x);default:return x=d,a.bitb=q,a.bitk=j,y.avail_in=S,y.total_in+=O-y.next_in_index,y.next_in_index=O,a.write=R,a.inflate_flush(y,x)}},a.free=function(){}}function i(e,i){var r,a=this,o=P,s=0,c=0,_=0,b=[0],w=[0],g=new n,m=0,y=new Int32Array(3*v),x=0,A=new t;a.bitk=0,a.bitb=0,a.window=new Uint8Array(i),a.end=i,a.read=0,a.write=0,a.reset=function(e,t){t&&(t[0]=x),o==W&&g.free(e),o=P,a.bitk=0,a.bitb=0,a.read=a.write=0},a.reset(e,null),a.inflate_flush=function(e,t){var n,i,r;return i=e.next_out_index,r=a.read,n=(r<=a.write?a.write:a.end)-r,n>e.avail_out&&(n=e.avail_out),0!==n&&t==p&&(t=l),e.avail_out-=n,e.total_out+=n,e.next_out.set(a.window.subarray(r,r+n),i),i+=n,r+=n,r==a.end&&(r=0,a.write==a.end&&(a.write=0),n=a.write-r,n>e.avail_out&&(n=e.avail_out),0!==n&&t==p&&(t=l),e.avail_out-=n,e.total_out+=n,e.next_out.set(a.window.subarray(r,r+n),i),i+=n,r+=n),e.next_out_index=i,a.read=r,t},a.proc=function(e,n){var i,p,v,x,k,U,S,R;for(x=e.next_in_index,k=e.avail_in,p=a.bitb,v=a.bitk,U=a.write,S=U<a.read?a.read-U-1:a.end-U;;)switch(o){case P:for(;3>v;){if(0===k)return a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n);n=l,k--,p|=(255&e.read_byte(x++))<<v,v+=8}switch(i=7&p,m=1&i,i>>>1){case 0:p>>>=3,v-=3,i=7&v,p>>>=i,v-=i,o=q;break;case 1:var F=[],L=[],M=[[]],$=[[]];t.inflate_trees_fixed(F,L,M,$),g.init(F[0],L[0],M[0],0,$[0],0),p>>>=3,v-=3,o=W;break;case 2:p>>>=3,v-=3,o=O;break;case 3:return p>>>=3,v-=3,o=K,e.msg="invalid block type",n=f,a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n)}break;case q:for(;32>v;){if(0===k)return a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n);n=l,k--,p|=(255&e.read_byte(x++))<<v,v+=8}if((~p>>>16&65535)!=(65535&p))return o=K,e.msg="invalid stored block lengths",n=f,a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n);s=65535&p,p=v=0,o=0!==s?j:0!==m?V:P;break;case j:if(0===k)return a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n);if(0===S&&(U==a.end&&0!==a.read&&(U=0,S=U<a.read?a.read-U-1:a.end-U),0===S&&(a.write=U,n=a.inflate_flush(e,n),U=a.write,S=U<a.read?a.read-U-1:a.end-U,U==a.end&&0!==a.read&&(U=0,S=U<a.read?a.read-U-1:a.end-U),0===S)))return a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n);if(n=l,i=s,i>k&&(i=k),i>S&&(i=S),a.window.set(e.read_buf(x,i),U),x+=i,k-=i,U+=i,S-=i,0!==(s-=i))break;o=0!==m?V:P;break;case O:for(;14>v;){if(0===k)return a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n);n=l,k--,p|=(255&e.read_byte(x++))<<v,v+=8}if(c=i=16383&p,(31&i)>29||(i>>5&31)>29)return o=K,e.msg="too many length or distance symbols",n=f,a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n);if(i=258+(31&i)+(i>>5&31),!r||r.length<i)r=[];else for(R=0;i>R;R++)r[R]=0;p>>>=14,v-=14,_=0,o=N;case N:for(;4+(c>>>10)>_;){for(;3>v;){if(0===k)return a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n);n=l,k--,p|=(255&e.read_byte(x++))<<v,v+=8}r[T[_++]]=7&p,p>>>=3,v-=3
}for(;19>_;)r[T[_++]]=0;if(b[0]=7,i=A.inflate_trees_bits(r,b,w,y,e),i!=l)return n=i,n==f&&(r=null,o=K),a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n);_=0,o=H;case H:for(;;){if(i=c,!(258+(31&i)+(i>>5&31)>_))break;var B,z;for(i=b[0];i>v;){if(0===k)return a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n);n=l,k--,p|=(255&e.read_byte(x++))<<v,v+=8}if(i=y[3*(w[0]+(p&h[i]))+1],z=y[3*(w[0]+(p&h[i]))+2],16>z)p>>>=i,v-=i,r[_++]=z;else{for(R=18==z?7:z-14,B=18==z?11:3;i+R>v;){if(0===k)return a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n);n=l,k--,p|=(255&e.read_byte(x++))<<v,v+=8}if(p>>>=i,v-=i,B+=p&h[R],p>>>=R,v-=R,R=_,i=c,R+B>258+(31&i)+(i>>5&31)||16==z&&1>R)return r=null,o=K,e.msg="invalid bit length repeat",n=f,a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n);z=16==z?r[R-1]:0;do r[R++]=z;while(0!==--B);_=R}}w[0]=-1;var D=[],I=[],C=[],E=[];if(D[0]=9,I[0]=6,i=c,i=A.inflate_trees_dynamic(257+(31&i),1+(i>>5&31),r,D,I,C,E,y,e),i!=l)return i==f&&(r=null,o=K),n=i,a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n);g.init(D[0],I[0],y,C[0],y,E[0]),o=W;case W:if(a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,(n=g.proc(a,e,n))!=u)return a.inflate_flush(e,n);if(n=l,g.free(e),x=e.next_in_index,k=e.avail_in,p=a.bitb,v=a.bitk,U=a.write,S=U<a.read?a.read-U-1:a.end-U,0===m){o=P;break}o=V;case V:if(a.write=U,n=a.inflate_flush(e,n),U=a.write,S=U<a.read?a.read-U-1:a.end-U,a.read!=a.write)return a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n);o=G;case G:return n=u,a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n);case K:return n=f,a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n);default:return n=d,a.bitb=p,a.bitk=v,e.avail_in=k,e.total_in+=x-e.next_in_index,e.next_in_index=x,a.write=U,a.inflate_flush(e,n)}},a.free=function(e){a.reset(e,null),a.window=null,y=null},a.set_dictionary=function(e,t,n){a.window.set(e.subarray(t,t+n),0),a.read=a.write=n},a.sync_point=function(){return o==q?1:0}}function r(){function e(e){return e&&e.istate?(e.total_in=e.total_out=0,e.msg=null,e.istate.mode=rt,e.istate.blocks.reset(e,null),l):d}var t=this;t.mode=0,t.method=0,t.was=[0],t.need=0,t.marker=0,t.wbits=0,t.inflateEnd=function(e){return t.blocks&&t.blocks.free(e),t.blocks=null,l},t.inflateInit=function(n,r){return n.msg=null,t.blocks=null,8>r||r>15?(t.inflateEnd(n),d):(t.wbits=r,n.istate.blocks=new i(n,1<<r),e(n),l)},t.inflate=function(e,t){var n,i;if(!e||!e.istate||!e.next_in)return d;for(t=t==w?p:l,n=p;;)switch(e.istate.mode){case J:if(0===e.avail_in)return n;if(n=t,e.avail_in--,e.total_in++,(15&(e.istate.method=e.read_byte(e.next_in_index++)))!=Y){e.istate.mode=ot,e.msg="unknown compression method",e.istate.marker=5;break}if((e.istate.method>>4)+8>e.istate.wbits){e.istate.mode=ot,e.msg="invalid window size",e.istate.marker=5;break}e.istate.mode=Z;case Z:if(0===e.avail_in)return n;if(n=t,e.avail_in--,e.total_in++,i=255&e.read_byte(e.next_in_index++),((e.istate.method<<8)+i)%31!==0){e.istate.mode=ot,e.msg="incorrect header check",e.istate.marker=5;break}if(0===(i&X)){e.istate.mode=rt;break}e.istate.mode=Q;case Q:if(0===e.avail_in)return n;n=t,e.avail_in--,e.total_in++,e.istate.need=(255&e.read_byte(e.next_in_index++))<<24&4278190080,e.istate.mode=et;case et:if(0===e.avail_in)return n;n=t,e.avail_in--,e.total_in++,e.istate.need+=(255&e.read_byte(e.next_in_index++))<<16&16711680,e.istate.mode=tt;case tt:if(0===e.avail_in)return n;n=t,e.avail_in--,e.total_in++,e.istate.need+=(255&e.read_byte(e.next_in_index++))<<8&65280,e.istate.mode=nt;case nt:return 0===e.avail_in?n:(n=t,e.avail_in--,e.total_in++,e.istate.need+=255&e.read_byte(e.next_in_index++),e.istate.mode=it,c);case it:return e.istate.mode=ot,e.msg="need dictionary",e.istate.marker=0,d;case rt:if(n=e.istate.blocks.proc(e,n),n==f){e.istate.mode=ot,e.istate.marker=0;break}if(n==l&&(n=t),n!=u)return n;n=t,e.istate.blocks.reset(e,e.istate.was),e.istate.mode=at;case at:return u;case ot:return f;default:return d}},t.inflateSetDictionary=function(e,t,n){var i=0,r=n;return e&&e.istate&&e.istate.mode==it?(r>=1<<e.istate.wbits&&(r=(1<<e.istate.wbits)-1,i=n-r),e.istate.blocks.set_dictionary(t,i,r),e.istate.mode=rt,l):d},t.inflateSync=function(t){var n,i,r,a,o;if(!t||!t.istate)return d;if(t.istate.mode!=ot&&(t.istate.mode=ot,t.istate.marker=0),0===(n=t.avail_in))return p;for(i=t.next_in_index,r=t.istate.marker;0!==n&&4>r;)t.read_byte(i)==st[r]?r++:r=0!==t.read_byte(i)?0:4-r,i++,n--;return t.total_in+=i-t.next_in_index,t.next_in_index=i,t.avail_in=n,t.istate.marker=r,4!=r?f:(a=t.total_in,o=t.total_out,e(t),t.total_in=a,t.total_out=o,t.istate.mode=rt,l)},t.inflateSyncPoint=function(e){return e&&e.istate&&e.istate.blocks?e.istate.blocks.sync_point():d}}function a(){}function o(){var e=this,t=new a,n=512,i=b,r=new Uint8Array(n),o=!1;t.inflateInit(),t.next_out=r,e.append=function(e,a){var s,c,d=[],f=0,_=0,h=0;if(0!==e.length){t.next_in_index=0,t.next_in=e,t.avail_in=e.length;do{if(t.next_out_index=0,t.avail_out=n,0!==t.avail_in||o||(t.next_in_index=0,o=!0),s=t.inflate(i),o&&s==p)return-1;if(s!=l&&s!=u)throw"inflating: "+t.msg;if((o||s==u)&&t.avail_in==e.length)return-1;t.next_out_index&&d.push(t.next_out_index==n?new Uint8Array(r):new Uint8Array(r.subarray(0,t.next_out_index))),h+=t.next_out_index,a&&t.next_in_index>0&&t.next_in_index!=f&&(a(t.next_in_index),f=t.next_in_index)}while(t.avail_in>0||0===t.avail_out);return c=new Uint8Array(h),d.forEach(function(e){c.set(e,_),_+=e.length}),c}},e.flush=function(){t.inflateEnd()}}var s=15,l=0,u=1,c=2,d=-2,f=-3,_=-4,p=-5,h=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],v=1440,b=0,w=4,g=9,m=5,y=[96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,192,80,7,10,0,8,96,0,8,32,0,9,160,0,8,0,0,8,128,0,8,64,0,9,224,80,7,6,0,8,88,0,8,24,0,9,144,83,7,59,0,8,120,0,8,56,0,9,208,81,7,17,0,8,104,0,8,40,0,9,176,0,8,8,0,8,136,0,8,72,0,9,240,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,200,81,7,13,0,8,100,0,8,36,0,9,168,0,8,4,0,8,132,0,8,68,0,9,232,80,7,8,0,8,92,0,8,28,0,9,152,84,7,83,0,8,124,0,8,60,0,9,216,82,7,23,0,8,108,0,8,44,0,9,184,0,8,12,0,8,140,0,8,76,0,9,248,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,196,81,7,11,0,8,98,0,8,34,0,9,164,0,8,2,0,8,130,0,8,66,0,9,228,80,7,7,0,8,90,0,8,26,0,9,148,84,7,67,0,8,122,0,8,58,0,9,212,82,7,19,0,8,106,0,8,42,0,9,180,0,8,10,0,8,138,0,8,74,0,9,244,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,204,81,7,15,0,8,102,0,8,38,0,9,172,0,8,6,0,8,134,0,8,70,0,9,236,80,7,9,0,8,94,0,8,30,0,9,156,84,7,99,0,8,126,0,8,62,0,9,220,82,7,27,0,8,110,0,8,46,0,9,188,0,8,14,0,8,142,0,8,78,0,9,252,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,194,80,7,10,0,8,97,0,8,33,0,9,162,0,8,1,0,8,129,0,8,65,0,9,226,80,7,6,0,8,89,0,8,25,0,9,146,83,7,59,0,8,121,0,8,57,0,9,210,81,7,17,0,8,105,0,8,41,0,9,178,0,8,9,0,8,137,0,8,73,0,9,242,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,202,81,7,13,0,8,101,0,8,37,0,9,170,0,8,5,0,8,133,0,8,69,0,9,234,80,7,8,0,8,93,0,8,29,0,9,154,84,7,83,0,8,125,0,8,61,0,9,218,82,7,23,0,8,109,0,8,45,0,9,186,0,8,13,0,8,141,0,8,77,0,9,250,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,198,81,7,11,0,8,99,0,8,35,0,9,166,0,8,3,0,8,131,0,8,67,0,9,230,80,7,7,0,8,91,0,8,27,0,9,150,84,7,67,0,8,123,0,8,59,0,9,214,82,7,19,0,8,107,0,8,43,0,9,182,0,8,11,0,8,139,0,8,75,0,9,246,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,206,81,7,15,0,8,103,0,8,39,0,9,174,0,8,7,0,8,135,0,8,71,0,9,238,80,7,9,0,8,95,0,8,31,0,9,158,84,7,99,0,8,127,0,8,63,0,9,222,82,7,27,0,8,111,0,8,47,0,9,190,0,8,15,0,8,143,0,8,79,0,9,254,96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,193,80,7,10,0,8,96,0,8,32,0,9,161,0,8,0,0,8,128,0,8,64,0,9,225,80,7,6,0,8,88,0,8,24,0,9,145,83,7,59,0,8,120,0,8,56,0,9,209,81,7,17,0,8,104,0,8,40,0,9,177,0,8,8,0,8,136,0,8,72,0,9,241,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,201,81,7,13,0,8,100,0,8,36,0,9,169,0,8,4,0,8,132,0,8,68,0,9,233,80,7,8,0,8,92,0,8,28,0,9,153,84,7,83,0,8,124,0,8,60,0,9,217,82,7,23,0,8,108,0,8,44,0,9,185,0,8,12,0,8,140,0,8,76,0,9,249,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,197,81,7,11,0,8,98,0,8,34,0,9,165,0,8,2,0,8,130,0,8,66,0,9,229,80,7,7,0,8,90,0,8,26,0,9,149,84,7,67,0,8,122,0,8,58,0,9,213,82,7,19,0,8,106,0,8,42,0,9,181,0,8,10,0,8,138,0,8,74,0,9,245,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,205,81,7,15,0,8,102,0,8,38,0,9,173,0,8,6,0,8,134,0,8,70,0,9,237,80,7,9,0,8,94,0,8,30,0,9,157,84,7,99,0,8,126,0,8,62,0,9,221,82,7,27,0,8,110,0,8,46,0,9,189,0,8,14,0,8,142,0,8,78,0,9,253,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,195,80,7,10,0,8,97,0,8,33,0,9,163,0,8,1,0,8,129,0,8,65,0,9,227,80,7,6,0,8,89,0,8,25,0,9,147,83,7,59,0,8,121,0,8,57,0,9,211,81,7,17,0,8,105,0,8,41,0,9,179,0,8,9,0,8,137,0,8,73,0,9,243,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,203,81,7,13,0,8,101,0,8,37,0,9,171,0,8,5,0,8,133,0,8,69,0,9,235,80,7,8,0,8,93,0,8,29,0,9,155,84,7,83,0,8,125,0,8,61,0,9,219,82,7,23,0,8,109,0,8,45,0,9,187,0,8,13,0,8,141,0,8,77,0,9,251,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,199,81,7,11,0,8,99,0,8,35,0,9,167,0,8,3,0,8,131,0,8,67,0,9,231,80,7,7,0,8,91,0,8,27,0,9,151,84,7,67,0,8,123,0,8,59,0,9,215,82,7,19,0,8,107,0,8,43,0,9,183,0,8,11,0,8,139,0,8,75,0,9,247,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,207,81,7,15,0,8,103,0,8,39,0,9,175,0,8,7,0,8,135,0,8,71,0,9,239,80,7,9,0,8,95,0,8,31,0,9,159,84,7,99,0,8,127,0,8,63,0,9,223,82,7,27,0,8,111,0,8,47,0,9,191,0,8,15,0,8,143,0,8,79,0,9,255],x=[80,5,1,87,5,257,83,5,17,91,5,4097,81,5,5,89,5,1025,85,5,65,93,5,16385,80,5,3,88,5,513,84,5,33,92,5,8193,82,5,9,90,5,2049,86,5,129,192,5,24577,80,5,2,87,5,385,83,5,25,91,5,6145,81,5,7,89,5,1537,85,5,97,93,5,24577,80,5,4,88,5,769,84,5,49,92,5,12289,82,5,13,90,5,3073,86,5,193,192,5,24577],A=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],k=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,112,112],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],S=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],R=15;t.inflate_trees_fixed=function(e,t,n,i){return e[0]=g,t[0]=m,n[0]=y,i[0]=x,l};var F=0,L=1,M=2,$=3,B=4,z=5,D=6,I=7,C=8,E=9,T=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],P=0,q=1,j=2,O=3,N=4,H=5,W=6,V=7,G=8,K=9,X=32,Y=8,J=0,Z=1,Q=2,et=3,tt=4,nt=5,it=6,rt=7,at=12,ot=13,st=[0,0,255,255];a.prototype={inflateInit:function(e){var t=this;return t.istate=new r,e||(e=s),t.istate.inflateInit(t,e)},inflate:function(e){var t=this;return t.istate?t.istate.inflate(t,e):d},inflateEnd:function(){var e=this;if(!e.istate)return d;var t=e.istate.inflateEnd(e);return e.istate=null,t},inflateSync:function(){var e=this;return e.istate?e.istate.inflateSync(e):d},inflateSetDictionary:function(e,t){var n=this;return n.istate?n.istate.inflateSetDictionary(n,e,t):d},read_byte:function(e){var t=this;return t.next_in.subarray(e,e+1)[0]},read_buf:function(e,t){var n=this;return n.next_in.subarray(e,e+t)}};var lt;e.zip?e.zip.Inflater=o:(lt=new o,e.addEventListener("message",function(t){var n=t.data;n.append&&e.postMessage({onappend:!0,data:lt.append(n.data,function(t){e.postMessage({progress:!0,current:t})})}),n.flush&&(lt.flush(),e.postMessage({onflush:!0}))},!1))}(this),app.config(["$locationProvider","$routeProvider","$controllerProvider","$provide","$compileProvider","$httpProvider","$filterProvider",function(e,t,n,i,r,a,o){app.register={controller:n.register,directive:r.directive,filter:o.register,factory:i.factory},i.decorator("$q",$qPendingPromises),a.interceptors.push(function(){function e(e){for(var t,n,i,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a="",o=0,s=e.length;s>o;){if(t=255&e.charCodeAt(o++),o==s){a+=r.charAt(t>>2),a+=r.charAt((3&t)<<4),a+="==";break}if(n=e.charCodeAt(o++),o==s){a+=r.charAt(t>>2),a+=r.charAt((3&t)<<4|(240&n)>>4),a+=r.charAt((15&n)<<2),a+="=";break}i=e.charCodeAt(o++),a+=r.charAt(t>>2),a+=r.charAt((3&t)<<4|(240&n)>>4),a+=r.charAt((15&n)<<2|(192&i)>>6),a+=r.charAt(63&i)}return a}return{response:function(t){return"base64"==t.config._responseType&&(t.data=e(t.data)),t},request:function(e){return"base64"==e.responseType&&(e._responseType=e.responseType,delete e.responseType),e}}}),i.decorator("$httpBackend",$HttpBackendService),a.interceptors.push($HttpBackendServiceInterceptor),forEach([["/",{templateUrl:"u/templates/intro.html"}],["/selected",{templateUrl:"u/templates/selected.html"}],["/my-device",{templateUrl:"u/templates/my-device.html"}],["/record-sound",{templateUrl:"u/templates/record-sound.html"}],["/record-video",{templateUrl:"u/templates/record-video.html"}],["/take-picture",{templateUrl:"u/templates/take-picture.html"}],["/link-url",{templateUrl:"u/templates/link-url.html"}],["/other-device",{templateUrl:"u/templates/other-device.html"}],["/web-images",{templateUrl:"u/templates/web-images.html"}]],function(e){t.when(e[0],e[1])}),e.html5Mode(!1)}]).run(["$locale","$rootScope","$http",function(e,t,n){n.get("http://afilepicker-api.herokuapp.com/config.json",{params:{referrer:document.referrer}}).then(function(n){extend(e,n.data.lang),t.$locale=e})}]).filter({filesize:filesizeFilter}).directive({wisHref:wisHrefDirective,autofocus:autofocus,wisLoad:wisLoadDirective,wisFullscreen:wisFullscreenDirective}).controller({ProgressCtrl:ProgressCtrl,MainCtrl:MainCtrl}).service({postMessage:postMessageService,convert:convertService,parseUri:parseUriService,Source:SourceService,FileList:FileListService,saveAs:saveAsService,zip:zipService,Reader:ReaderService}),window.wis={app:app,prefix:prefix,vendor:vendor,el:el,query:query,forEach:forEach};
//# sourceMappingURL=data:application/json;base64,